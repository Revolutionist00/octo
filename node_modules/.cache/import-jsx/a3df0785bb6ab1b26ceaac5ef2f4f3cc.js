import resource from './cli.js';
import 'crypto-js';
//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = require('crypto');
// npm install request
//var request = require('request');

console.log(resource);
// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsInJlcXVlc3QiLCJlcnIiLCJyZXNwb25zZSJdLCJzb3VyY2VzIjpbInRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlc291cmNlIGZyb20gJy4vY2xpLmpzJztcbmltcG9ydCAnY3J5cHRvLWpzJ1xuLy9jb25zdCBDcnlwdG9KUyA9IHJlcXVpcmUoJ2NyeXB0by1qcycpO1xuXG4vLyBucG0gaW5zdGFsbCBjcnlwdG9cbi8vdmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuLy8gbnBtIGluc3RhbGwgcmVxdWVzdFxuLy92YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuY29uc29sZS5sb2cocmVzb3VyY2UpXG4vLyBTZXQgdGhlc2UgaW4geW91ciBlbnZpcm9ubWVudCwgb3IgZW50ZXIgdGhlbSBoZXJlIHdpdGggdGhlIGFjdHVhbCBzdHJpbmdcbnZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG52YXIgYXBpU2VjcmV0ID0gJ0FydERiWTM2MnlXZVczNXdodVhOZVF6WUM1bnVuRlRXJztcblxuLy9nZXQgdW5peCB0aW1lIGluIHNlY29uZHNcbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuLy8gc2V0IHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSByZXF1ZXN0IG1lc3NhZ2VcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbi8vY3JlYXRlIGEgaGV4ZWRlY2ltYWwgZW5jb2RlZCBTSEEyNTYgc2lnbmF0dXJlIG9mIHRoZSBtZXNzYWdlXG52YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxRQUFRLE1BQU0sVUFBVTtBQUMvQixPQUFPLFdBQVc7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUFDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixRQUFRLENBQUM7QUFDckI7QUFDQSxJQUFJRyxNQUFNLEdBQUcsa0JBQWtCO0FBQy9CLElBQUlDLFNBQVMsR0FBRyxrQ0FBa0M7O0FBRWxEO0FBQ0EsSUFBSUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7QUFFN0M7QUFDQSxJQUFJQyxHQUFHLEdBQUc7RUFDTkMsTUFBTSxFQUFFLEtBQUs7RUFDYkMsSUFBSSxFQUFFLG9CQUFvQixHQUFHWixRQUFRO0VBQ3JDYSxJQUFJLEVBQUU7QUFDVixDQUFDO0FBRUQsSUFBSUMsT0FBTyxHQUFHVCxTQUFTLEdBQUdLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRCxHQUFHLENBQUNFLElBQUksR0FBR0YsR0FBRyxDQUFDRyxJQUFJO0FBQzFEWixPQUFPLENBQUNDLEdBQUcsQ0FBQ1ksT0FBTyxDQUFDOztBQUVwQjtBQUNBLElBQUlDLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxVQUFVLENBQUMsUUFBUSxFQUFFYixTQUFTLENBQUMsQ0FBQ2MsTUFBTSxDQUFDSixPQUFPLENBQUMsQ0FBQ0ssTUFBTSxDQUFDLEtBQUssQ0FBQzs7QUFFcEY7QUFDQSxJQUFJQyxPQUFPLEdBQUc7RUFDVkMsT0FBTyxFQUFFLDJCQUEyQjtFQUNwQ0MsR0FBRyxFQUFFWixHQUFHLENBQUNFLElBQUk7RUFDYkQsTUFBTSxFQUFFRCxHQUFHLENBQUNDLE1BQU07RUFDbEJZLE9BQU8sRUFBRTtJQUNMLGdCQUFnQixFQUFFUixTQUFTO0lBQzNCLHFCQUFxQixFQUFFVixTQUFTO0lBQ2hDLGVBQWUsRUFBRUYsTUFBTTtJQUN2QixZQUFZLEVBQUU7RUFDbEI7QUFDSixDQUFDO0FBRURxQixPQUFPLENBQUNKLE9BQU8sRUFBQyxVQUFTSyxHQUFHLEVBQUVDLFFBQVEsRUFBQztFQUNuQyxJQUFJRCxHQUFHLEVBQUV4QixPQUFPLENBQUNDLEdBQUcsQ0FBQ3VCLEdBQUcsQ0FBQztFQUN6QnhCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDd0IsUUFBUSxDQUFDYixJQUFJLENBQUM7QUFDOUIsQ0FBQyxDQUFDIn0=