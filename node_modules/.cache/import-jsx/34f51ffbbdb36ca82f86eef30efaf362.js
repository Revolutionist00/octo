import './cli.js';
import crypto from 'crypto-js';
//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsInJlc291cmNlIiwiYm9keSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwic2lnbmF0dXJlIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsInJlcXVlc3QiLCJlcnIiLCJyZXNwb25zZSJdLCJzb3VyY2VzIjpbInRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2NsaS5qcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0by1qcydcbi8vY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3Rcbi8vdmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2VcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbi8vY3JlYXRlIHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0XG52YXIgb3B0aW9ucyA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuY29pbmJhc2UuY29tLycsXG4gICAgdXJsOiByZXEucGF0aCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IGFwaUtleSxcbiAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbiAgICB9XG59O1xuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBVTtBQUNqQixPQUFPQSxNQUFNLE1BQU0sV0FBVztBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUlDLE1BQU0sR0FBRyxrQkFBa0I7QUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQzs7QUFFbEQ7QUFDQSxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUU3QztBQUNBLElBQUlDLEdBQUcsR0FBRztFQUNOQyxNQUFNLEVBQUUsS0FBSztFQUNiQyxJQUFJLEVBQUUsb0JBQW9CLEdBQUdDLFFBQVE7RUFDckNDLElBQUksRUFBRTtBQUNWLENBQUM7QUFFRCxJQUFJQyxPQUFPLEdBQUdWLFNBQVMsR0FBR0ssR0FBRyxDQUFDQyxNQUFNLEdBQUdELEdBQUcsQ0FBQ0UsSUFBSSxHQUFHRixHQUFHLENBQUNJLElBQUk7QUFDMURFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixPQUFPLENBQUM7O0FBRXBCO0FBQ0EsSUFBSUcsU0FBUyxHQUFHaEIsTUFBTSxDQUFDaUIsVUFBVSxDQUFDLFFBQVEsRUFBRWYsU0FBUyxDQUFDLENBQUNnQixNQUFNLENBQUNMLE9BQU8sQ0FBQyxDQUFDTSxNQUFNLENBQUMsS0FBSyxDQUFDOztBQUVwRjtBQUNBLElBQUlDLE9BQU8sR0FBRztFQUNWQyxPQUFPLEVBQUUsMkJBQTJCO0VBQ3BDQyxHQUFHLEVBQUVkLEdBQUcsQ0FBQ0UsSUFBSTtFQUNiRCxNQUFNLEVBQUVELEdBQUcsQ0FBQ0MsTUFBTTtFQUNsQmMsT0FBTyxFQUFFO0lBQ0wsZ0JBQWdCLEVBQUVQLFNBQVM7SUFDM0IscUJBQXFCLEVBQUViLFNBQVM7SUFDaEMsZUFBZSxFQUFFRixNQUFNO0lBQ3ZCLFlBQVksRUFBRTtFQUNsQjtBQUNKLENBQUM7QUFFRHVCLE9BQU8sQ0FBQ0osT0FBTyxFQUFDLFVBQVNLLEdBQUcsRUFBRUMsUUFBUSxFQUFDO0VBQ25DLElBQUlELEdBQUcsRUFBRVgsT0FBTyxDQUFDQyxHQUFHLENBQUNVLEdBQUcsQ0FBQztFQUN6QlgsT0FBTyxDQUFDQyxHQUFHLENBQUNXLFFBQVEsQ0FBQ2QsSUFBSSxDQUFDO0FBQzlCLENBQUMsQ0FBQyJ9