import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import test, { send } from './test.cjs';

//const test = require('./test.cjs');
import { jsx as _jsx } from "react/jsx-runtime";
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function selectOption1() {
  const Options1 = () => {
    const handleSelect = item => {
      // `item` = { label: 'First', value: 'first'
      //		test.send(item.value);
      //export default select = item.value
    };
    const items = [{
      label: 'List Accounts',
      value: '/accounts'
    }, {
      label: 'Cancel Orders',
      value: '/orders/batch_cancel'
    }, {
      label: 'List Orders',
      value: '/orders/historical/batch'
    }, {
      label: 'List Fills',
      value: '/orders/historical/fills'
    }, {
      label: 'Get Best Bid/Ask',
      value: '/best_bid_ask'
    }, {
      label: 'Get Product Book',
      value: '/product_book'
    }, {
      label: 'List Products',
      value: '/products'
    }, {
      label: 'Get Tran-sactions Summary',
      value: '/transaction_summary'
    }];
    return _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    });
  };
  render(_jsx(Options1, {}));
}
selectOption1();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInRlc3QiLCJzZW5kIiwianN4IiwiX2pzeCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJzZWxlY3RPcHRpb24xIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwiaXRlbXMiLCJsYWJlbCIsInZhbHVlIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZWpzJ1xuaW1wb3J0IHRlc3QsIHsgc2VuZCB9IGZyb20gJy4vdGVzdC5janMnXG5cbi8vY29uc3QgdGVzdCA9IHJlcXVpcmUoJy4vdGVzdC5janMnKTtcbnZhciBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG5mdW5jdGlvbiBzZWxlY3RPcHRpb24xKCkge1xuY29uc3QgT3B0aW9uczEgPSAoKSA9PiB7XG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9IGl0ZW0gPT4ge1xuXHRcdC8vIGBpdGVtYCA9IHsgbGFiZWw6ICdGaXJzdCcsIHZhbHVlOiAnZmlyc3QnXG4vL1x0XHR0ZXN0LnNlbmQoaXRlbS52YWx1ZSk7XG4vL2V4cG9ydCBkZWZhdWx0IHNlbGVjdCA9IGl0ZW0udmFsdWVcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAvPik7XG5cbn1cblxuc2VsZWN0T3B0aW9uMSgpXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsT0FBTyxNQUFNLFdBQVc7QUFDL0IsT0FBT0MsSUFBSSxJQUFJQyxJQUFJLFFBQVEsWUFBWTs7QUFFdkM7QUFBQSxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFDQSxJQUFJQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRS9CLFFBQVFILEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUk7SUFDTCxJQUFJSSxRQUFRLEdBQUcsV0FBVztJQUNqQztFQUNHLEtBQUssSUFBSTtJQUNaLElBQUlBLFFBQVEsR0FBRyxXQUFXO0lBQzFCO0VBQ0c7SUFBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ2hCLEtBQUssQ0FBQztBQUNkO0FBQUM7QUFFRCxTQUFTQyxhQUFhQSxDQUFBLEVBQUc7RUFDekIsTUFBTUMsUUFBUSxHQUFHQSxDQUFBLEtBQU07SUFDdEIsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLElBQUk7TUFDNUI7TUFDRjtNQUNBO0lBQUEsQ0FDRTtJQUVELE1BQU1DLEtBQUssR0FBRyxDQUNiO01BQ0FDLEtBQUssRUFBRSxlQUFlO01BQ3RCQyxLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUQsS0FBSyxFQUFFLGVBQWU7TUFDdEJDLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRCxLQUFLLEVBQUUsYUFBYTtNQUNwQkMsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FELEtBQUssRUFBRSxZQUFZO01BQ25CQyxLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUQsS0FBSyxFQUFFLGtCQUFrQjtNQUN6QkMsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FELEtBQUssRUFBRSxrQkFBa0I7TUFDekJDLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRCxLQUFLLEVBQUUsZUFBZTtNQUN0QkMsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FELEtBQUssRUFBRSwyQkFBMkI7TUFDbENDLEtBQUssRUFBRTtJQUNQLENBQUMsQ0FDRDtJQUVELE9BQU9kLElBQUEsQ0FBQ0wsV0FBVztNQUFDaUIsS0FBSyxFQUFFQSxLQUFNO01BQUNHLFFBQVEsRUFBRUw7SUFBYSxDQUFFLENBQUM7RUFDN0QsQ0FBQztFQUVEaEIsTUFBTSxDQUFDTSxJQUFBLENBQUNTLFFBQVEsSUFBRSxDQUFDLENBQUM7QUFFcEI7QUFFQUQsYUFBYSxDQUFDLENBQUMifQ==