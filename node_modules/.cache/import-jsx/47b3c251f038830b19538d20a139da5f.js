import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
//import sha256 from 'crypto-js/sha256';
import hmacSHA256 from 'crypto-js/hmac-sha256.js';
import Base16 from 'crypto-js/enc-hex.js';
import request from 'request';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
//var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
//const hashDigest = sha256(nonce + message);
const signature = Base16.stringify(hmacSHA256(message, apiSecret));

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwiaG1hY1NIQTI1NiIsIkJhc2UxNiIsInJlcXVlc3QiLCJqc3giLCJfanN4IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwiYm9keSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJzdHJpbmdpZnkiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJlcnIiLCJyZXNwb25zZSIsIk9wdGlvbnMxIiwiaGFuZGxlU2VsZWN0IiwiaXRlbSIsInZhbHVlIiwiaXRlbXMiLCJsYWJlbCIsIm9uU2VsZWN0Il0sInNvdXJjZXMiOlsiY2xpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0Jztcbi8vaW1wb3J0IHNoYTI1NiBmcm9tICdjcnlwdG8tanMvc2hhMjU2JztcbmltcG9ydCBobWFjU0hBMjU2IGZyb20gJ2NyeXB0by1qcy9obWFjLXNoYTI1Ni5qcyc7XG5pbXBvcnQgQmFzZTE2IGZyb20gJ2NyeXB0by1qcy9lbmMtaGV4LmpzJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnXG5cbmNvbnN0IGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbi8vY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3Rcbi8vdmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2Vcbi8vdmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcbi8vY29uc3QgaGFzaERpZ2VzdCA9IHNoYTI1Nihub25jZSArIG1lc3NhZ2UpO1xuY29uc3Qgc2lnbmF0dXJlID0gQmFzZTE2LnN0cmluZ2lmeShobWFjU0hBMjU2KG1lc3NhZ2UsIGFwaVNlY3JldCkpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0JyB9XG5cdFx0Y29uc29sZS5sb2cocmVzb3VyY2UgPSBpdGVtLnZhbHVlKVxuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcbi8vZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2UgPSBpdGVtLnZhbHVlXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUM7QUFDQSxPQUFPQyxVQUFVLE1BQU0sMEJBQTBCO0FBQ2pELE9BQU9DLE1BQU0sTUFBTSxzQkFBc0I7QUFDekMsT0FBT0MsT0FBTyxNQUFNLFNBQVM7QUFBQSxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFN0IsTUFBTUMsR0FBRyxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVqQyxRQUFRSCxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJO0lBQ0wsSUFBSUksUUFBUSxHQUFHLFdBQVc7SUFDakM7RUFDRyxLQUFL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