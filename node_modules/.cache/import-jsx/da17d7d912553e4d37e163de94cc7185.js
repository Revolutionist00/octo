import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
//import sha256 from 'crypto-js/sha256';
import hmacSHA256 from 'crypto-js/hmac-sha256';
import Base16 from 'crypto-js/enc-base16';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
//var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
//const hashDigest = sha256(nonce + message);
const hmacDigest = Base16.stringify(hmacSHA256(message, apiSecret));

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwiaG1hY1NIQTI1NiIsIkJhc2UxNiIsImpzeCIsIl9qc3giLCJhcmciLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicmVzb3VyY2UiLCJjb25zb2xlIiwibG9nIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJib2R5IiwibWVzc2FnZSIsImhtYWNEaWdlc3QiLCJzdHJpbmdpZnkiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJzaWduYXR1cmUiLCJyZXF1ZXN0IiwiZXJyIiwicmVzcG9uc2UiLCJPcHRpb25zMSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJ2YWx1ZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG4vL2ltcG9ydCBzaGEyNTYgZnJvbSAnY3J5cHRvLWpzL3NoYTI1Nic7XG5pbXBvcnQgaG1hY1NIQTI1NiBmcm9tICdjcnlwdG8tanMvaG1hYy1zaGEyNTYnO1xuaW1wb3J0IEJhc2UxNiBmcm9tICdjcnlwdG8tanMvZW5jLWJhc2UxNic7XG5cblxuY29uc3QgYXJnID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5zd2l0Y2ggKGFyZ1swXSkge1xuICAgIGNhc2UgJy1sJzpcbiAgICAgICAgdmFyIHJlc291cmNlID0gJy9wcm9kdWN0cydcblx0YnJlYWs7XG4gICAgY2FzZSAnLWEnOlxuXHR2YXIgcmVzb3VyY2UgPSAnL2FjY291bnRzJ1xuXHRicmVhaztcbiAgICBkZWZhdWx0OiBjb25zb2xlLmxvZyhcbiAgICAgICAgJ3VuZCcpO1xufTtcblxuLy9jb25zdCBDcnlwdG9KUyA9IHJlcXVpcmUoJ2NyeXB0by1qcycpO1xuXG4vLyBucG0gaW5zdGFsbCBjcnlwdG9cbi8vdmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0by1qcycpO1xuLy8gbnBtIGluc3RhbGwgcmVxdWVzdFxuLy92YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuLy8gU2V0IHRoZXNlIGluIHlvdXIgZW52aXJvbm1lbnQsIG9yIGVudGVyIHRoZW0gaGVyZSB3aXRoIHRoZSBhY3R1YWwgc3RyaW5nXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbi8vZ2V0IHVuaXggdGltZSBpbiBzZWNvbmRzXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbi8vIHNldCB0aGUgcGFyYW1ldGVyIGZvciB0aGUgcmVxdWVzdCBtZXNzYWdlXG52YXIgcmVxID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcbmNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4vL2NyZWF0ZSBhIGhleGVkZWNpbWFsIGVuY29kZWQgU0hBMjU2IHNpZ25hdHVyZSBvZiB0aGUgbWVzc2FnZVxuLy92YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuLy9jb25zdCBoYXNoRGlnZXN0ID0gc2hhMjU2KG5vbmNlICsgbWVzc2FnZSk7XG5jb25zdCBobWFjRGlnZXN0ID0gQmFzZTE2LnN0cmluZ2lmeShobWFjU0hBMjU2KG1lc3NhZ2UsIGFwaVNlY3JldCkpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0JyB9XG5cdFx0Y29uc29sZS5sb2cocmVzb3VyY2UgPSBpdGVtLnZhbHVlKVxuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcbi8vZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2UgPSBpdGVtLnZhbHVlXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUM7QUFDQSxPQUFPQyxVQUFVLE1BQU0sdUJBQXVCO0FBQzlDLE9BQU9DLE1BQU0sTUFBTSxzQkFBc0I7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFHMUMsTUFBTUMsR0FBRyxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUVqQyxRQUFRSCxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJO0lBQ0wsSUFBSUksUUFBUSxHQUFHLFdBQVc7SUFDakM7RUFDRyxLQUFLLElBQUk7SUFDWixJQUFJQSxRQUFRLEdBQUcsV0FBVztJQUMxQjtFQUNHO0lB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