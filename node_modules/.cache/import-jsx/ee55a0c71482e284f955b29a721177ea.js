import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import test, { send } from './test.cjs';
//const test = require('./test.cjs');
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first'
    //		test.send(item.value);

    var apiKey = '2q7DfBj1Gcik5lBE';
    var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
    var timestamp = Math.floor(Date.now() / 1000);
    var req = {
      method: 'GET',
      path: '/api/v3/brokerage/' + resource,
      body: ''
    };
    var message = timestamp + req.method + req.path + req.body;
    var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
    var options = {
      baseUrl: 'https://api.coinbase.com/',
      url: req.path,
      method: req.method,
      headers: {
        'CB-ACCESS-SIGN': signature,
        'CB-ACCESS-TIMESTAMP': timestamp,
        'CB-ACCESS-KEY': apiKey,
        'CB-VERSION': '2015-07-22'
      }
    };
    request(options, function (err, response) {
      if (err) console.log(err);
      console.log(response.body);
    });
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));

//   .then send(result) =>
//	console.log(output)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInRlc3QiLCJzZW5kIiwianN4IiwiX2pzeCIsImNyeXB0byIsInJlcXVlc3QiLCJhcmciLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicmVzb3VyY2UiLCJjb25zb2xlIiwibG9nIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJib2R5IiwibWVzc2FnZSIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJlcnIiLCJyZXNwb25zZSIsIml0ZW1zIiwibGFiZWwiLCJ2YWx1ZSIsIm9uU2VsZWN0Il0sInNvdXJjZXMiOlsiY2xpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCByZXF1aXJlIGZyb20gJ3JlcXVpcmVqcyc7XG5pbXBvcnQgdGVzdCwgeyBzZW5kIH0gZnJvbSAnLi90ZXN0LmNqcyc7XG4vL2NvbnN0IHRlc3QgPSByZXF1aXJlKCcuL3Rlc3QuY2pzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxudmFyIGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0J1xuLy9cdFx0dGVzdC5zZW5kKGl0ZW0udmFsdWUpO1xuXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5cbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG59O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcblxuXG4vLyAgIC50aGVuIHNlbmQocmVzdWx0KSA9PlxuLy9cdGNvbnNvbGUubG9nKG91dHB1dClcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsTUFBTSxRQUFPLEtBQUs7QUFDMUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxPQUFPLE1BQU0sV0FBVztBQUMvQixPQUFPQyxJQUFJLElBQUlDLElBQUksUUFBUSxZQUFZO0FBQ3ZDO0FBQUEsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQ0EsSUFBSUMsTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzlCLElBQUlNLE9BQU8sR0FBR04sT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUVoQyxJQUFJTyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRS9CLFFBQVFILEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUk7SUFDTCxJQUFJSSxRQUFRLEdBQUcsV0FBVztJQUNqQztFQUNHLEtBQUssSUFBSTtJQUNaLElBQUlBLFFBQVEsR0FBRyxXQUFXO0lBQzFCO0VBQ0c7SUFBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ2hCLEtBQUssQ0FBQztBQUNkO0FBQUM7QUFFRCxNQUFNQyxRQUFRLEdBQUdBLENBQUEsS0FBTTtFQUN0QixNQUFNQyxZQUFZLEdBQUdDLElBQUksSUFBSTtJQUM1QjtJQUNGOztJQUVBLElBQUlDLE1BQU0sR0FBRyxrQkFBa0I7SUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQztJQUVsRCxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRTdDLElBQUlDLEdBQUcsR0FBRztNQUNOQyxNQUFNLEVBQUUsS0FBSztNQUNiQyxJQUFJLEVBQUUsb0JBQW9CLEdBQUdmLFFBQVE7TUFDckNnQixJQUFJLEVBQUU7SUFDVixDQUFDO0lBRUQsSUFBSUMsT0FBTyxHQUFHVCxTQUFTLEdBQUdLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRCxHQUFHLENBQUNFLElBQUksR0FBR0YsR0FBRyxDQUFDRyxJQUFJO0lBRTFELElBQUlFLFNBQVMsR0FBR3hCLE1BQU0sQ0FBQ3lCLFVBQVUsQ0FBQyxRQUFRLEVBQUVaLFNBQVMsQ0FBQyxDQUFDYSxNQUFNLENBQUNILE9BQU8sQ0FBQyxDQUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDO0lBRXBGLElBQUlDLE9BQU8sR0FBRztNQUNWQyxPQUFPLEVBQUUsMkJBQTJCO01BQ3BDQyxHQUFHLEVBQUVYLEdBQUcsQ0FBQ0UsSUFBSTtNQUNiRCxNQUFNLEVBQUVELEdBQUcsQ0FBQ0MsTUFBTTtNQUNsQlcsT0FBTyxFQUFFO1FBQ0wsZ0JBQWdCLEVBQUVQLFNBQVM7UUFDM0IscUJBQXFCLEVBQUVWLFNBQVM7UUFDaEMsZUFBZSxFQUFFRixNQUFNO1FBQ3ZCLFlBQVksRUFBRTtNQUNsQjtJQUNKLENBQUM7SUFFRFgsT0FBTyxDQUFDMkIsT0FBTyxFQUFDLFVBQVNJLEdBQUcsRUFBRUMsUUFBUSxFQUFDO01BQ25DLElBQUlELEdBQUcsRUFBRXpCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDd0IsR0FBRyxDQUFDO01BQ3pCekIsT0FBTyxDQUFDQyxHQUFHLENBQUN5QixRQUFRLENBQUNYLElBQUksQ0FBQztJQUM5QixDQUFDLENBQUM7RUFDRixDQUFDO0VBRUEsTUFBTVksS0FBSyxHQUFHLENBQ2I7SUFDQUMsS0FBSyxFQUFFLGVBQWU7SUFDdEJDLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBRCxLQUFLLEVBQUUsZUFBZTtJQUN0QkMsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FELEtBQUssRUFBRSxhQUFhO0lBQ3BCQyxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQUQsS0FBSyxFQUFFLFlBQVk7SUFDbkJDLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBRCxLQUFLLEVBQUUsa0JBQWtCO0lBQ3pCQyxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQUQsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QkMsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FELEtBQUssRUFBRSxlQUFlO0lBQ3RCQyxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQUQsS0FBSyxFQUFFLDJCQUEyQjtJQUNsQ0MsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxDQUNEO0VBRUQsT0FBT3JDLElBQUEsQ0FBQ0wsV0FBVztJQUFDd0MsS0FBSyxFQUFFQSxLQUFNO0lBQUNHLFFBQVEsRUFBRTNCO0VBQWEsQ0FBRSxDQUFDO0FBQzdELENBQUM7QUFFRGpCLE1BQU0sQ0FBQ00sSUFBQSxDQUFDVSxRQUFRLElBQUUsQ0FBQyxDQUFDOztBQUdwQjtBQUNBIn0=