import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import sha256 from 'crypto-js/sha256';
import hmacSHA256 from 'crypto-js/hmac-sha256';
import Base16 from 'crypto-js/enc-base16';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
//var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
//const hashDigest = sha256(nonce + message);
const hmacDigest = Base16.stringify(hmacSHA256(message, apiSecret));

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0Iiwic2hhMjU2IiwiaG1hY1NIQTI1NiIsIkJhc2UxNiIsImpzeCIsIl9qc3giLCJhcmciLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicmVzb3VyY2UiLCJjb25zb2xlIiwibG9nIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJib2R5IiwibWVzc2FnZSIsImhtYWNEaWdlc3QiLCJzdHJpbmdpZnkiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJzaWduYXR1cmUiLCJyZXF1ZXN0IiwiZXJyIiwicmVzcG9uc2UiLCJPcHRpb25zMSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJ2YWx1ZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgc2hhMjU2IGZyb20gJ2NyeXB0by1qcy9zaGEyNTYnO1xuaW1wb3J0IGhtYWNTSEEyNTYgZnJvbSAnY3J5cHRvLWpzL2htYWMtc2hhMjU2JztcbmltcG9ydCBCYXNlMTYgZnJvbSAnY3J5cHRvLWpzL2VuYy1iYXNlMTYnO1xuXG5cbmNvbnN0IGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbi8vY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3Rcbi8vdmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2Vcbi8vdmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcbi8vY29uc3QgaGFzaERpZ2VzdCA9IHNoYTI1Nihub25jZSArIG1lc3NhZ2UpO1xuY29uc3QgaG1hY0RpZ2VzdCA9IEJhc2UxNi5zdHJpbmdpZnkoaG1hY1NIQTI1NihtZXNzYWdlLCBhcGlTZWNyZXQpKTtcblxuLy9jcmVhdGUgdGhlIHJlcXVlc3Qgb3B0aW9ucyBvYmplY3RcbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcblxuXG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCcgfVxuXHRcdGNvbnNvbGUubG9nKHJlc291cmNlID0gaXRlbS52YWx1ZSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAvPik7XG4vL2V4cG9ydCBkZWZhdWx0IHJlc291cmNlID0gaXRlbS52YWx1ZVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUN6QixTQUFRQyxNQUFNLFFBQU8sS0FBSztBQUMxQixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLE1BQU0sTUFBTSxrQkFBa0I7QUFDckMsT0FBT0MsVUFBVSxNQUFNLHVCQUF1QjtBQUM5QyxPQUFPQyxNQUFNLE1BQU0sc0JBQXNCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRzFDLE1BQU1DLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFakMsUUFBUUgsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSTtJQUNMLElBQUlJLFFBQVEsR0FBRyxXQUFXO0lBQ2pDO0VBQ0csS0FBSyxJQUFJO0lBQ1osSUFB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