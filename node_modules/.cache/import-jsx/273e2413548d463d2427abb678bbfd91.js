import resource from './cli.js';
const CryptoJS = require('crypto-js');

// npm install crypto
var crypto = require('crypto');
// npm install request
var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXNvdXJjZSIsIkNyeXB0b0pTIiwicmVxdWlyZSIsImNyeXB0byIsInJlcXVlc3QiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJlcnIiLCJyZXNwb25zZSJdLCJzb3VyY2VzIjpbInRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlc291cmNlIGZyb20gJy4vY2xpLmpzJztcbmNvbnN0IENyeXB0b0pTID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG5cbi8vIG5wbSBpbnN0YWxsIGNyeXB0b1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuLy8gbnBtIGluc3RhbGwgcmVxdWVzdFxudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2VcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbi8vY3JlYXRlIHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0XG52YXIgb3B0aW9ucyA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuY29pbmJhc2UuY29tLycsXG4gICAgdXJsOiByZXEucGF0aCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IGFwaUtleSxcbiAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbiAgICB9XG59O1xuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFFBQVEsTUFBTSxVQUFVO0FBQy9CLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7QUFFckM7QUFDQSxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUI7QUFDQSxJQUFJRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRWhDO0FBQ0EsSUFBSUcsTUFBTSxHQUFHLGtCQUFrQjtBQUMvQixJQUFJQyxTQUFTLEdBQUcsa0NBQWtDOztBQUVsRDtBQUNBLElBQUlDLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7O0FBRTdDO0FBQ0EsSUFBSUMsR0FBRyxHQUFHO0VBQ05DLE1BQU0sRUFBRSxLQUFLO0VBQ2JDLElBQUksRUFBRSxvQkFBb0IsR0FBR2QsUUFBUTtFQUNyQ2UsSUFBSSxFQUFFO0FBQ1YsQ0FBQztBQUVELElBQUlDLE9BQU8sR0FBR1QsU0FBUyxHQUFHSyxHQUFHLENBQUNDLE1BQU0sR0FBR0QsR0FBRyxDQUFDRSxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0csSUFBSTtBQUMxREUsT0FBTyxDQUFDQyxHQUFHLENBQUNGLE9BQU8sQ0FBQzs7QUFFcEI7QUFDQSxJQUFJRyxTQUFTLEdBQUdoQixNQUFNLENBQUNpQixVQUFVLENBQUMsUUFBUSxFQUFFZCxTQUFTLENBQUMsQ0FBQ2UsTUFBTSxDQUFDTCxPQUFPLENBQUMsQ0FBQ00sTUFBTSxDQUFDLEtBQUssQ0FBQzs7QUFFcEY7QUFDQSxJQUFJQyxPQUFPLEdBQUc7RUFDVkMsT0FBTyxFQUFFLDJCQUEyQjtFQUNwQ0MsR0FBRyxFQUFFYixHQUFHLENBQUNFLElBQUk7RUFDYkQsTUFBTSxFQUFFRCxHQUFHLENBQUNDLE1BQU07RUFDbEJhLE9BQU8sRUFBRTtJQUNMLGdCQUFnQixFQUFFUCxTQUFTO0lBQzNCLHFCQUFxQixFQUFFWixTQUFTO0lBQ2hDLGVBQWUsRUFBRUYsTUFBTTtJQUN2QixZQUFZLEVBQUU7RUFDbEI7QUFDSixDQUFDO0FBRURELE9BQU8sQ0FBQ21CLE9BQU8sRUFBQyxVQUFTSSxHQUFHLEVBQUVDLFFBQVEsRUFBQztFQUNuQyxJQUFJRCxHQUFHLEVBQUVWLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDUyxHQUFHLENBQUM7RUFDekJWLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDVSxRQUFRLENBQUNiLElBQUksQ0FBQztBQUM5QixDQUFDLENBQUMifQ==