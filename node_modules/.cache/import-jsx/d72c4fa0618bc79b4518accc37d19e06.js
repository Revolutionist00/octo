import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import hmacSHA256 from 'crypto-js/hmac-sha256.js';
import Base16 from 'crypto-js/enc-hex.js';
import request from 'request';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function send(resource) {
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
  var timestamp = Math.floor(Date.now() / 1000);
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;

  //const signature = Base16.stringify(hmacSHA256(message, apiSecret));
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    send(item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwiaG1hY1NIQTI1NiIsIkJhc2UxNiIsInJlcXVlc3QiLCJqc3giLCJfanN4IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsImVyciIsInJlc3BvbnNlIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IGhtYWNTSEEyNTYgZnJvbSAnY3J5cHRvLWpzL2htYWMtc2hhMjU2LmpzJztcbmltcG9ydCBCYXNlMTYgZnJvbSAnY3J5cHRvLWpzL2VuYy1oZXguanMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdCdcblxuY29uc3QgYXJnID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5zd2l0Y2ggKGFyZ1swXSkge1xuICAgIGNhc2UgJy1sJzpcbiAgICAgICAgdmFyIHJlc291cmNlID0gJy9wcm9kdWN0cydcblx0YnJlYWs7XG4gICAgY2FzZSAnLWEnOlxuXHR2YXIgcmVzb3VyY2UgPSAnL2FjY291bnRzJ1xuXHRicmVhaztcbiAgICBkZWZhdWx0OiBjb25zb2xlLmxvZyhcbiAgICAgICAgJ3VuZCcpO1xufTtcblxuZnVuY3Rpb24gc2VuZChyZXNvdXJjZSkge1xuXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuXG4vL2NvbnN0IHNpZ25hdHVyZSA9IEJhc2UxNi5zdHJpbmdpZnkoaG1hY1NIQTI1NihtZXNzYWdlLCBhcGlTZWNyZXQpKTtcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG59O1xuXG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCcgfVxuXHRcdHNlbmQoaXRlbS52YWx1ZSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAv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