import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import send from './test.js';
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//function send(resource) {
//
//var apiKey = '2q7DfBj1Gcik5lBE';
//var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
//
//var timestamp = Math.floor(Date.now() / 1000);
//var req = {
//    method: 'GET',
//    path: '/api/v3/brokerage/' + resource,
//    body: ''
//};
//
//var message = timestamp + req.method + req.path + req.body;
//
//var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
//
//var options = {
//    baseUrl: 'https://api.coinbase.com/',
//    url: req.path,
//    method: req.method,
//    headers: {
//        'CB-ACCESS-SIGN': signature,
//        'CB-ACCESS-TIMESTAMP': timestamp,
//        'CB-ACCESS-KEY': apiKey,
//        'CB-VERSION': '2015-07-22'
//    }
//};
//
//request(options,function(err, response){
//    if (err) console.log(err);
//    console.log(response.body);
//});
//};

const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    send(item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInNlbmQiLCJqc3giLCJfanN4IiwiY3J5cHRvIiwicmVxdWVzdCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJPcHRpb25zMSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJ2YWx1ZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlanMnXG5pbXBvcnQgc2VuZCBmcm9tICcuL3Rlc3QuanMnXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxudmFyIGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbi8vZnVuY3Rpb24gc2VuZChyZXNvdXJjZSkge1xuLy9cbi8vdmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbi8vdmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG4vL1xuLy92YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4vL3ZhciByZXEgPSB7XG4vLyAgICBtZXRob2Q6ICdHRVQnLFxuLy8gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbi8vICAgIGJvZHk6ICcnXG4vL307XG4vL1xuLy92YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuLy9cbi8vdmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcbi8vXG4vL3ZhciBvcHRpb25zID0ge1xuLy8gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuLy8gICAgdXJsOiByZXEucGF0aCxcbi8vICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbi8vICAgIGhlYWRlcnM6IHtcbi8vICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4vLyAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4vLyAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4vLyAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbi8vICAgIH1cbi8vfTtcbi8vXG4vL3JlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbi8vICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4vLyAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbi8vfSk7XG4vL307XG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0JyB9XG5cdFx0c2VuZChpdGVtLnZhbHVlKVxuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcbi8vZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2UgPSBpdGVtLnZhbHVlXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsT0FBTyxNQUFNLFdBQVc7QUFDL0IsT0FBT0MsSUFBSSxNQUFNLFdBQVc7QUFBQSxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFDNUIsSUFBSUMsTUFBTSxHQUFHSixPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzlCLElBQUlLLE9BQU8sR0FBR0wsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUVoQyxJQUFJTSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRS9CLFFBQVFILEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUk7SUFDTCxJQUFJSSxRQUFRLEdBQUcsV0FBVztJQUNqQztFQUNHLEtBQUssSUFBSTtJQUNaLElBQUlBLFFBQVEsR0FBRyxXQUFXO0lBQzFCO0VBQ0c7SUFBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ2hCLEtBQUssQ0FBQztBQUNkO0FBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLFFBQVEsR0FBR0EsQ0FBQSxLQUFNO0VBQ3RCLE1BQU1DLFlBQVksR0FBR0MsSUFBSSxJQUFJO0lBQzVCO0lBQ0FkLElBQUksQ0FBQ2MsSUFBSSxDQUFDQyxLQUFLLENBQUM7RUFDakIsQ0FBQztFQUVELE1BQU1DLEtBQUssR0FBRyxDQUNiO0lBQ0FDLEtBQUssRUFBRSxlQUFlO0lBQ3RCRixLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQUUsS0FBSyxFQUFFLGVBQWU7SUFDdEJGLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBRSxLQUFLLEVBQUUsYUFBYTtJQUNwQkYsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FFLEtBQUssRUFBRSxZQUFZO0lBQ25CRixLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQUUsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QkYsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FFLEtBQUssRUFBRSxrQkFBa0I7SUFDekJGLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBRSxLQUFLLEVBQUUsZUFBZTtJQUN0QkYsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FFLEtBQUssRUFBRSwyQkFBMkI7SUFDbENGLEtBQUssRUFBRTtFQUNQLENBQUMsQ0FDRDtFQUVELE9BQU9iLElBQUEsQ0FBQ0osV0FBVztJQUFDa0IsS0FBSyxFQUFFQSxLQUFNO0lBQUNFLFFBQVEsRUFBRUw7RUFBYSxDQUFFLENBQUM7QUFDN0QsQ0FBQztBQUVEaEIsTUFBTSxDQUFDSyxJQUFBLENBQUNVLFFBQVEsSUFBRSxDQUFDLENBQUM7QUFDcEIifQ==