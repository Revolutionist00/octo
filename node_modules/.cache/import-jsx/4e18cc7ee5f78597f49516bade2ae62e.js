import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function send(resource) {
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
  var timestamp = Math.floor(Date.now() / 1000);
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;

  //const signature = Base16.stringify(hmacSHA256(message, apiSecret));
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    send(item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsImpzeCIsIl9qc3giLCJjcnlwdG8iLCJyZXF1ZXN0IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsImVyciIsInJlc3BvbnNlIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZWpzJ1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxudmFyIGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbmZ1bmN0aW9uIHNlbmQocmVzb3VyY2UpIHtcblxudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG52YXIgcmVxID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcblxuLy9jb25zdCBzaWduYXR1cmUgPSBCYXNlMTYuc3RyaW5naWZ5KGhtYWNTSEEyNTYobWVzc2FnZSwgYXBpU2VjcmV0KSk7XG52YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuXG52YXIgb3B0aW9ucyA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuY29pbmJhc2UuY29tLycsXG4gICAgdXJsOiByZXEucGF0aCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IGFwaUtleSxcbiAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbiAgICB9XG59O1xuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xufTtcblxuY29uc3QgT3B0aW9uczEgPSAoKSA9PiB7XG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9IGl0ZW0gPT4ge1xuXHRcdC8vIGBpdGVtYCA9IHsgbGFiZWw6ICdGaXJzdCcsIHZhbHVlOiAnZmlyc3QnIH1cblx0XHRzZW5kKGl0ZW0udmFsdWUpXG5cdH07XG5cblx0Y29uc3QgaXRlbXMgPSBbXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBBY2NvdW50cycsXG5cdFx0dmFsdWU6ICcvYWNjb3VudHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdDYW5jZWwgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvYmF0Y2hfY2FuY2VsJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2JhdGNoJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBGaWxscycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvZmlsbHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgQmVzdCBCaWQvQXNrJyxcblx0XHR2YWx1ZTogJy9iZXN0X2JpZF9hc2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgUHJvZHVjdCBCb29rJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0X2Jvb2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IFByb2R1Y3RzJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBUcmFuLXNhY3Rpb25zIFN1bW1hcnknLFxuXHRcdHZhbHVlOiAnL3RyYW5zYWN0aW9uX3N1bW1hcnknXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSAvPjtcbn07XG5cbnJlbmRlcig8T3B0aW9uczEgLz4pO1xuLy9leHBvcnQgZGVmYXVsdCByZXNvdXJjZSA9IGl0ZW0u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