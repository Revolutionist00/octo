import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//function send(resource) {
//
//var apiKey = '2q7DfBj1Gcik5lBE';
//var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
//
//var timestamp = Math.floor(Date.now() / 1000);
//var req = {
//    method: 'GET',
//    path: '/api/v3/brokerage/' + resource,
//    body: ''
//};
//
//var message = timestamp + req.method + req.path + req.body;
//
//var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
//
//var options = {
//    baseUrl: 'https://api.coinbase.com/',
//    url: req.path,
//    method: req.method,
//    headers: {
//        'CB-ACCESS-SIGN': signature,
//        'CB-ACCESS-TIMESTAMP': timestamp,
//        'CB-ACCESS-KEY': apiKey,
//        'CB-VERSION': '2015-07-22'
//    }
//};
//
//request(options,function(err, response){
//    if (err) console.log(err);
//    console.log(response.body);
//});
//};
function select() {
  const Options1 = () => {
    const handleSelect = item => {
      // `item` = { label: 'First', value: 'first'
      return item.value;
    };
    const items = [{
      label: 'List Accounts',
      value: '/accounts'
    }, {
      label: 'Cancel Orders',
      value: '/orders/batch_cancel'
    }, {
      label: 'List Orders',
      value: '/orders/historical/batch'
    }, {
      label: 'List Fills',
      value: '/orders/historical/fills'
    }, {
      label: 'Get Best Bid/Ask',
      value: '/best_bid_ask'
    }, {
      label: 'Get Product Book',
      value: '/product_book'
    }, {
      label: 'List Products',
      value: '/products'
    }, {
      label: 'Get Tran-sactions Summary',
      value: '/transaction_summary'
    }];
    return _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    });
  };
  render(_jsx(Options1, {}));
  //export default resource = item.value
}

select();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsImpzeCIsIl9qc3giLCJjcnlwdG8iLCJyZXF1ZXN0IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbGVjdCIsIk9wdGlvbnMxIiwiaGFuZGxlU2VsZWN0IiwiaXRlbSIsInZhbHVlIiwiaXRlbXMiLCJsYWJlbCIsIm9uU2VsZWN0Il0sInNvdXJjZXMiOlsiY2xpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCByZXF1aXJlIGZyb20gJ3JlcXVpcmVqcydcblxudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbnZhciBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG4vL2Z1bmN0aW9uIHNlbmQocmVzb3VyY2UpIHtcbi8vXG4vL3ZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG4vL3ZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuLy9cbi8vdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuLy92YXIgcmVxID0ge1xuLy8gICAgbWV0aG9kOiAnR0VUJyxcbi8vICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4vLyAgICBib2R5OiAnJ1xuLy99O1xuLy9cbi8vdmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcbi8vXG4vL3ZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG4vL1xuLy92YXIgb3B0aW9ucyA9IHtcbi8vICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbi8vICAgIHVybDogcmVxLnBhdGgsXG4vLyAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4vLyAgICBoZWFkZXJzOiB7XG4vLyAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuLy8gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuLy8gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuLy8gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4vLyAgICB9XG4vL307XG4vL1xuLy9yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4vLyAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuLy8gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG4vL30pO1xuLy99O1xuZnVuY3Rpb24gc2VsZWN0KCkge1xuY29uc3QgT3B0aW9uczEgPSAoKSA9PiB7XG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9IGl0ZW0gPT4ge1xuXHRcdC8vIGBpdGVtYCA9IHsgbGFiZWw6ICdGaXJzdCcsIHZhbHVlOiAnZmlyc3QnXG5cdFx0cmV0dXJuIGl0ZW0udmFsdWVcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAvPik7XG4vL2V4cG9ydCBkZWZhdWx0IHJlc291cmNlID0gaXRlbS52YWx1ZVxufVxuc2VsZWN0KClcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsTUFBTSxRQUFPLEtBQUs7QUFDMUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxPQUFPLE1BQU0sV0FBVztBQUFBLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUUvQixJQUFJQyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUIsSUFBSUksT0FBTyxHQUFHSixPQUFPLENBQUMsU0FBUyxDQUFDO0FBRWhDLElBQUlLLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFL0IsUUFBUUgsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSTtJQUNMLElBQUlJLFFBQVEsR0FBRyxXQUFXO0lBQ2pDO0VBQ0csS0FBSyxJQUFJO0lBQ1osSUFBSUEsUUFBUSxHQUFHLFdBQVc7SUFDMUI7RUFDRztJQUFTQyxPQUFPLENBQUNDLEdBQUcsQ0FDaEIsS0FBSyxDQUFDO0FBQ2Q7QUFBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxNQUFNQSxDQUFBLEVBQUc7RUFDbEIsTUFBTUMsUUFBUSxHQUFHQSxDQUFBLEtBQU07SUFDdEIsTUFBTUMsWUFBWSxHQUFHQyxJQUFJLElBQUk7TUFDNUI7TUFDQSxPQUFPQSxJQUFJLENBQUNDLEtBQUs7SUFDbEIsQ0FBQztJQUVELE1BQU1DLEtBQUssR0FBRyxDQUNiO01BQ0FDLEtBQUssRUFBRSxlQUFlO01BQ3RCRixLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUUsS0FBSyxFQUFFLGVBQWU7TUFDdEJGLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRSxLQUFLLEVBQUUsYUFBYTtNQUNwQkYsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FFLEtBQUssRUFBRSxZQUFZO01BQ25CRixLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUUsS0FBSyxFQUFFLGtCQUFrQjtNQUN6QkYsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FFLEtBQUssRUFBRSxrQkFBa0I7TUFDekJGLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRSxLQUFLLEVBQUUsZUFBZTtNQUN0QkYsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FFLEtBQUssRUFBRSwyQkFBMkI7TUFDbENGLEtBQUssRUFBRTtJQUNQLENBQUMsQ0FDRDtJQUVELE9BQU9kLElBQUEsQ0FBQ0gsV0FBVztNQUFDa0IsS0FBSyxFQUFFQSxLQUFNO01BQUNFLFFBQVEsRUFBRUw7SUFBYSxDQUFFLENBQUM7RUFDN0QsQ0FBQztFQUVEaEIsTUFBTSxDQUFDSSxJQUFBLENBQUNXLFFBQVEsSUFBRSxDQUFDLENBQUM7RUFDcEI7QUFDQTs7QUFDQUQsTUFBTSxDQUFDLENBQUMifQ==