import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import request from 'request';
import require from 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function send(resource) {
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
  var timestamp = Math.floor(Date.now() / 1000);
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;

  //const signature = Base16.stringify(hmacSHA256(message, apiSecret));
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    send(item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWVzdCIsInJlcXVpcmUiLCJqc3giLCJfanN4IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsImVyciIsInJlc3BvbnNlIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdCdcbmltcG9ydCByZXF1aXJlIGZyb20gJ3JlcXVpcmVqcydcblxuY29uc3QgYXJnID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG5zd2l0Y2ggKGFyZ1swXSkge1xuICAgIGNhc2UgJy1sJzpcbiAgICAgICAgdmFyIHJlc291cmNlID0gJy9wcm9kdWN0cydcblx0YnJlYWs7XG4gICAgY2FzZSAnLWEnOlxuXHR2YXIgcmVzb3VyY2UgPSAnL2FjY291bnRzJ1xuXHRicmVhaztcbiAgICBkZWZhdWx0OiBjb25zb2xlLmxvZyhcbiAgICAgICAgJ3VuZCcpO1xufTtcblxuZnVuY3Rpb24gc2VuZChyZXNvdXJjZSkge1xuXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuXG4vL2NvbnN0IHNpZ25hdHVyZSA9IEJhc2UxNi5zdHJpbmdpZnkoaG1hY1NIQTI1NihtZXNzYWdlLCBhcGlTZWNyZXQpKTtcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG59O1xuXG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCcgfVxuXHRcdHNlbmQoaXRlbS52YWx1ZSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAvPik7XG4vL2V4cG9ydCBkZWZhdWx0IHJlc291cmNlID0gaXRlbS52YWx1ZVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFL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