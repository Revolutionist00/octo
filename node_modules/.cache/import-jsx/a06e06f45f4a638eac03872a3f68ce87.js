import './cli.js';
import 'crypto-js';
//const CryptoJS = require('crypto-js');

// npm install crypto
var crypto = require('crypto');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJyZXNvdXJjZSIsImJvZHkiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJyZXF1ZXN0IiwiZXJyIiwicmVzcG9uc2UiXSwic291cmNlcyI6WyJ0ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9jbGkuanMnO1xuaW1wb3J0ICdjcnlwdG8tanMnXG4vL2NvbnN0IENyeXB0b0pTID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG5cbi8vIG5wbSBpbnN0YWxsIGNyeXB0b1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuLy8gbnBtIGluc3RhbGwgcmVxdWVzdFxuLy92YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuLy8gU2V0IHRoZXNlIGluIHlvdXIgZW52aXJvbm1lbnQsIG9yIGVudGVyIHRoZW0gaGVyZSB3aXRoIHRoZSBhY3R1YWwgc3RyaW5nXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbi8vZ2V0IHVuaXggdGltZSBpbiBzZWNvbmRzXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbi8vIHNldCB0aGUgcGFyYW1ldGVyIGZvciB0aGUgcmVxdWVzdCBtZXNzYWdlXG52YXIgcmVxID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcbmNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4vL2NyZWF0ZSBhIGhleGVkZWNpbWFsIGVuY29kZWQgU0hBMjU2IHNpZ25hdHVyZSBvZiB0aGUgbWVzc2FnZVxudmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcblxuLy9jcmVhdGUgdGhlIHJlcXVlc3Qgb3B0aW9ucyBvYmplY3RcbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sV0FBVztBQUNsQjs7QUFFQTtBQUNBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUM5QjtBQUNBOztBQUVBO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLGtCQUFrQjtBQUMvQixJQUFJQyxTQUFTLEdBQUcsa0NBQWtDOztBQUVsRDtBQUNBLElBQUlDLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7O0FBRTdDO0FBQ0EsSUFBSUMsR0FBRyxHQUFHO0VBQ05DLE1BQU0sRUFBRSxLQUFLO0VBQ2JDLElBQUksRUFBRSxvQkFBb0IsR0FBR0MsUUFBUTtFQUNyQ0MsSUFBSSxFQUFFO0FBQ1YsQ0FBQztBQUVELElBQUlDLE9BQU8sR0FBR1YsU0FBUyxHQUFHSyxHQUFHLENBQUNDLE1BQU0sR0FBR0QsR0FBRyxDQUFDRSxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0ksSUFBSTtBQUMxREUsT0FBTyxDQUFDQyxHQUFHLENBQUNGLE9BQU8sQ0FBQzs7QUFFcEI7QUFDQSxJQUFJRyxTQUFTLEdBQUdqQixNQUFNLENBQUNrQixVQUFVLENBQUMsUUFBUSxFQUFFZixTQUFTLENBQUMsQ0FBQ2dCLE1BQU0sQ0FBQ0wsT0FBTyxDQUFDLENBQUNNLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0FBRXBGO0FBQ0EsSUFBSUMsT0FBTyxHQUFHO0VBQ1ZDLE9BQU8sRUFBRSwyQkFBMkI7RUFDcENDLEdBQUcsRUFBRWQsR0FBRyxDQUFDRSxJQUFJO0VBQ2JELE1BQU0sRUFBRUQsR0FBRyxDQUFDQyxNQUFNO0VBQ2xCYyxPQUFPLEVBQUU7SUFDTCxnQkFBZ0IsRUFBRVAsU0FBUztJQUMzQixxQkFBcUIsRUFBRWIsU0FBUztJQUNoQyxlQUFlLEVBQUVGLE1BQU07SUFDdkIsWUFBWSxFQUFFO0VBQ2xCO0FBQ0osQ0FBQztBQUVEdUIsT0FBTyxDQUFDSixPQUFPLEVBQUMsVUFBU0ssR0FBRyxFQUFFQyxRQUFRLEVBQUM7RUFDbkMsSUFBSUQsR0FBRyxFQUFFWCxPQUFPLENBQUNDLEdBQUcsQ0FBQ1UsR0FBRyxDQUFDO0VBQ3pCWCxPQUFPLENBQUNDLEdBQUcsQ0FBQ1csUUFBUSxDQUFDZCxJQUFJLENBQUM7QUFDOUIsQ0FBQyxDQUFDIn0=