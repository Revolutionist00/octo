import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import 'crypto-js';
import 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
//var crypto = crypto-js();
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwianN4IiwiX2pzeCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsInJlcXVlc3QiLCJlcnIiLCJyZXNwb25zZSIsIk9wdGlvbnMxIiwiaGFuZGxlU2VsZWN0IiwiaXRlbSIsInZhbHVlIiwiaXRlbXMiLCJsYWJlbCIsIm9uU2VsZWN0Il0sInNvdXJjZXMiOlsiY2xpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCAnY3J5cHRvLWpzJ1xuaW1wb3J0ICdyZXF1aXJlanMnXG5cbmNvbnN0IGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbi8vY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSBjcnlwdG8tanMoKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3Rcbi8vdmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2VcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbi8vY3JlYXRlIHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0XG52YXIgb3B0aW9ucyA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuY29pbmJhc2UuY29tLycsXG4gICAgdXJsOiByZXEucGF0aCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IGFwaUtleSxcbiAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbiAgICB9XG59O1xuXG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG5cblxuY29uc3QgT3B0aW9uczEgPSAoKSA9PiB7XG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9IGl0ZW0gPT4ge1xuXHRcdC8vIGBpdGVtYCA9IHsgbGFiZWw6ICdGaXJzdCcsIHZhbHVlOiAnZmlyc3QnIH1cblx0XHRjb25zb2xlLmxvZyhyZXNvdXJjZSA9IGl0ZW0udmFsdWUpXG5cdH07XG5cblx0Y29uc3QgaXRlbXMgPSBbXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBBY2NvdW50cycsXG5cdFx0dmFsdWU6ICcvYWNjb3VudHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdDYW5jZWwgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvYmF0Y2hfY2FuY2VsJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2JhdGNoJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBGaWxscycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvZmlsbHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgQmVzdCBCaWQvQXNrJyxcblx0XHR2YWx1ZTogJy9iZXN0X2JpZF9hc2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgUHJvZHVjdCBCb29rJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0X2Jvb2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IFByb2R1Y3RzJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBUcmFuLXNhY3Rpb25zIFN1bW1hcnknLFxuXHRcdHZhbHVlOiAnL3RyYW5zYWN0aW9uX3N1bW1hcnknXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSAvPjtcbn07XG5cbnJlbmRlcig8T3B0aW9uczEgLz4pO1xuLy9leHBvcnQgZGVmYXVsdCByZXNvdXJjZSA9IGl0ZW0udmFsdWVcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsTUFBTSxRQUFPLEtBQUs7QUFDMUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPLFdBQVc7QUFDbEIsT0FBTyxXQUFXO0FBQUEsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRWxCLE1BQU1DLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFakMsUUFBUUgsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSTtJQUNMLElBQUlJLFFBQVEsR0FBRyxXQUFXO0lBQ2pDO0VBQ0csS0FBSyxJQUFJO0lBQ1osSUFBSUEsUUFBUSxHQUFHLFdBQVc7SUFDMUI7RUFDRztJQUFTQyxPQUFPLENBQUNDLEdBQUcsQ0FDaEIsS0FBSyxDQUFDO0FBQ2Q7QUFBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUlDLE1BQU0sR0FBRyxrQkFBa0I7QUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQzs7QUFFbEQ7QUFDQSxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUU3QztBQUNBLElBQUlDLEdBQUcsR0FBRztFQUNOQyxN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