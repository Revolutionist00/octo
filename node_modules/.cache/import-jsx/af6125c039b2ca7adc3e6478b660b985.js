import require from 'requirejs';
//import './cli.js';
//import * as crypto from 'crypto-js';
//const requirejs = require('requirejs');
var crypto = require('crypto');
var request = require('request');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
function send(resource) {
  // Set these in your environment, or enter them here with the actual string
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

  //get unix time in seconds
  var timestamp = Math.floor(Date.now() / 1000);

  // set the parameter for the request message
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;
  //console.log(message);

  //create a hexedecimal encoded SHA256 signature of the message
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

  //create the request options object
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
export default send;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiY3J5cHRvIiwicmVxdWVzdCIsInNlbmQiLCJyZXNvdXJjZSIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwiYm9keSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwib3B0aW9ucyIsImJhc2VVcmwiLCJ1cmwiLCJoZWFkZXJzIiwiZXJyIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsidGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlanMnXG4vL2ltcG9ydCAnLi9jbGkuanMnO1xuLy9pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvLWpzJztcbi8vY29uc3QgcmVxdWlyZWpzID0gcmVxdWlyZSgncmVxdWlyZWpzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3RcbmZ1bmN0aW9uIHNlbmQocmVzb3VyY2UpIHtcbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG4vL2NvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4vL2NyZWF0ZSBhIGhleGVkZWNpbWFsIGVuY29kZWQgU0hBMjU2IHNpZ25hdHVyZSBvZiB0aGUgbWVzc2FnZVxudmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcblxuLy9jcmVhdGUgdGhlIHJlcXVlc3Qgb3B0aW9ucyBvYmplY3RcbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG5cbn1cbmV4cG9ydCBkZWZhdWx0IHNlbmRcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBTyxNQUFNLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzlCLElBQUlFLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsU0FBU0csSUFBSUEsQ0FBQ0MsUUFBUSxFQUFFO0VBQ3hCO0VBQ0EsSUFBSUMsTUFBTSxHQUFHLGtCQUFrQjtFQUMvQixJQUFJQyxTQUFTLEdBQUcsa0NBQWtDOztFQUVsRDtFQUNBLElBQUlDLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7O0VBRTdDO0VBQ0EsSUFBSUMsR0FBRyxHQUFHO0lBQ05DLE1BQU0sRUFBRSxLQUFLO0lBQ2JDLElBQUksRUFBRSxvQkFBb0IsR0FBR1YsUUFBUTtJQUNyQ1csSUFBSSxFQUFFO0VBQ1YsQ0FBQztFQUVELElBQUlDLE9BQU8sR0FBR1QsU0FBUyxHQUFHSyxHQUFHLENBQUNDLE1BQU0sR0FBR0QsR0FBRyxDQUFDRSxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0csSUFBSTtFQUMxRDs7RUFFQTtFQUNBLElBQUlFLFNBQVMsR0FBR2hCLE1BQU0sQ0FBQ2lCLFVBQVUsQ0FBQyxRQUFRLEVBQUVaLFNBQVMsQ0FBQyxDQUFDYSxNQUFNLENBQUNILE9BQU8sQ0FBQyxDQUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDOztFQUVwRjtFQUNBLElBQUlDLE9BQU8sR0FBRztJQUNWQyxPQUFPLEVBQUUsMkJBQTJCO0lBQ3BDQyxHQUFHLEVBQUVYLEdBQUcsQ0FBQ0UsSUFBSTtJQUNiRCxNQUFNLEVBQUVELEdBQUcsQ0FBQ0MsTUFBTTtJQUNsQlcsT0FBTyxFQUFFO01BQ0wsZ0JBQWdCLEVBQUVQLFNBQVM7TUFDM0IscUJBQXFCLEVBQUVWLFNBQVM7TUFDaEMsZUFBZSxFQUFFRixNQUFNO01BQ3ZCLFlBQVksRUFBRTtJQUNsQjtFQUNKLENBQUM7RUFFREgsT0FBTyxDQUFDbUIsT0FBTyxFQUFDLFVBQVNJLEdBQUcsRUFBRUMsUUFBUSxFQUFDO0lBQ25DLElBQUlELEdBQUcsRUFBRUUsT0FBTyxDQUFDQyxHQUFHLENBQUNILEdBQUcsQ0FBQztJQUN6QkUsT0FBTyxDQUFDQyxHQUFHLENBQUNGLFFBQVEsQ0FBQ1gsSUFBSSxDQUFDO0VBQzlCLENBQUMsQ0FBQztBQUVGO0FBQ0EsZUFBZVosSUFBSSJ9