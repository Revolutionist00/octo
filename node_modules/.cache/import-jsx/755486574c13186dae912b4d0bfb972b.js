import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import test, { send } from './test.cjs';
//const test = require('./test.cjs');
import { jsx as _jsx } from "react/jsx-runtime";
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function selectOption1() {
  const Options1 = () => {
    const handleSelect = item => {
      // `item` = { label: 'First', value: 'first'
      test.send(item.value);
    };
    const items = [{
      label: 'List Accounts',
      value: '/accounts'
    }, {
      label: 'Cancel Orders',
      value: '/orders/batch_cancel'
    }, {
      label: 'List Orders',
      value: '/orders/historical/batch'
    }, {
      label: 'List Fills',
      value: '/orders/historical/fills'
    }, {
      label: 'Get Best Bid/Ask',
      value: '/best_bid_ask'
    }, {
      label: 'Get Product Book',
      value: '/product_book'
    }, {
      label: 'List Products',
      value: '/products'
    }, {
      label: 'Get Tran-sactions Summary',
      value: '/transaction_summary'
    }];
    return _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    });
  };
  render(_jsx(Options1, {}));
}

//   .then send(result) =>
//	console.log(output)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInRlc3QiLCJzZW5kIiwianN4IiwiX2pzeCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJzZWxlY3RPcHRpb24xIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZWpzJztcbmltcG9ydCB0ZXN0LCB7IHNlbmQgfSBmcm9tICcuL3Rlc3QuY2pzJztcbi8vY29uc3QgdGVzdCA9IHJlcXVpcmUoJy4vdGVzdC5janMnKTtcbnZhciBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG5mdW5jdGlvbiBzZWxlY3RPcHRpb24xKCkge1xuY29uc3QgT3B0aW9uczEgPSAoKSA9PiB7XG5cdGNvbnN0IGhhbmRsZVNlbGVjdCA9IGl0ZW0gPT4ge1xuXHRcdC8vIGBpdGVtYCA9IHsgbGFiZWw6ICdGaXJzdCcsIHZhbHVlOiAnZmlyc3QnXG5cdFx0dGVzdC5zZW5kKGl0ZW0udmFsdWUpO1xuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcblxufVxuXG4vLyAgIC50aGVuIHNlbmQocmVzdWx0KSA9PlxuLy9cdGNvbnNvbGUubG9nKG91dHB1dClcbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBSyxNQUFNLE9BQU87QUFDekIsU0FBUUMsTUFBTSxRQUFPLEtBQUs7QUFDMUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxPQUFPLE1BQU0sV0FBVztBQUMvQixPQUFPQyxJQUFJLElBQUlDLElBQUksUUFBUSxZQUFZO0FBQ3ZDO0FBQUEsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQ0EsSUFBSUMsR0FBRyxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUUvQixRQUFRSCxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ1YsS0FBSyxJQUFJO0lBQ0wsSUFBSUksUUFBUSxHQUFHLFdBQVc7SUFDakM7RUFDRyxLQUFLLElBQUk7SUFDWixJQUFJQSxRQUFRLEdBQUcsV0FBVztJQUMxQjtFQUNHO0lBQVNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUNoQixLQUFLLENBQUM7QUFDZDtBQUFDO0FBRUQsU0FBU0MsYUFBYUEsQ0FBQSxFQUFHO0VBQ3pCLE1BQU1DLFFBQVEsR0FBR0EsQ0FBQSxLQUFNO0lBQ3RCLE1BQU1DLFlBQVksR0FBR0MsSUFBSSxJQUFJO01BQzVCO01BQ0FkLElBQUksQ0FBQ0MsSUFBSSxDQUFDYSxJQUFJLENBQUNDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTUMsS0FBSyxHQUFHLENBQ2I7TUFDQUMsS0FBSyxFQUFFLGVBQWU7TUFDdEJGLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRSxLQUFLLEVBQUUsZUFBZTtNQUN0QkYsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FFLEtBQUssRUFBRSxhQUFhO01BQ3BCRixLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUUsS0FBSyxFQUFFLFlBQVk7TUFDbkJGLEtBQUssRUFBRTtJQUNQLENBQUMsRUFDRDtNQUNBRSxLQUFLLEVBQUUsa0JBQWtCO01BQ3pCRixLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUUsS0FBSyxFQUFFLGtCQUFrQjtNQUN6QkYsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0FFLEtBQUssRUFBRSxlQUFlO01BQ3RCRixLQUFLLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDQUUsS0FBSyxFQUFFLDJCQUEyQjtNQUNsQ0YsS0FBSyxFQUFFO0lBQ1AsQ0FBQyxDQUNEO0lBRUQsT0FBT1osSUFBQSxDQUFDTCxXQUFXO01BQUNrQixLQUFLLEVBQUVBLEtBQU07TUFBQ0UsUUFBUSxFQUFFTDtJQUFhLENBQUUsQ0FBQztFQUM3RCxDQUFDO0VBRURoQixNQUFNLENBQUNNLElBQUEsQ0FBQ1MsUUFBUSxJQUFFLENBQUMsQ0FBQztBQUVwQjs7QUFFQTtBQUNBIn0=