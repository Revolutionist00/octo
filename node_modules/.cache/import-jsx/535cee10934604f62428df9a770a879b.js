import require from 'requirejs';
//import select from './cli.js';
//import * as crypto from 'crypto-js';
//const requirejs = require('requirejs');
var crypto = require('crypto');
var request = require('request');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
function send(resource) {
  // Set these in your environment, or enter them here with the actual string
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

  //get unix time in seconds
  var timestamp = Math.floor(Date.now() / 1000);

  // set the parameter for the request message
  var req = {
    method: 'GET',
    path: 'api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;
  //console.log(message);

  //create a hexedecimal encoded SHA256 signature of the message
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

  //create the request options object
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
export default send;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiY3J5cHRvIiwicmVxdWVzdCIsInNlbmQiLCJyZXNvdXJjZSIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwiYm9keSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwib3B0aW9ucyIsImJhc2VVcmwiLCJ1cmwiLCJoZWFkZXJzIiwiZXJyIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsidGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlanMnXG4vL2ltcG9ydCBzZWxlY3QgZnJvbSAnLi9jbGkuanMnO1xuLy9pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvLWpzJztcbi8vY29uc3QgcmVxdWlyZWpzID0gcmVxdWlyZSgncmVxdWlyZWpzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG4vL3ZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcbi8vIG5wbSBpbnN0YWxsIHJlcXVlc3RcbmZ1bmN0aW9uIHNlbmQocmVzb3VyY2UpIHtcbi8vIFNldCB0aGVzZSBpbiB5b3VyIGVudmlyb25tZW50LCBvciBlbnRlciB0aGVtIGhlcmUgd2l0aCB0aGUgYWN0dWFsIHN0cmluZ1xudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG4vL2dldCB1bml4IHRpbWUgaW4gc2Vjb25kc1xudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4vLyBzZXQgdGhlIHBhcmFtZXRlciBmb3IgdGhlIHJlcXVlc3QgbWVzc2FnZVxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICdhcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcbi8vY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbi8vY3JlYXRlIGEgaGV4ZWRlY2ltYWwgZW5jb2RlZCBTSEEyNTYgc2lnbmF0dXJlIG9mIHRoZSBtZXNzYWdlXG52YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcblxufVxuZXhwb3J0IGRlZmF1bHQgc2VuZFxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxPQUFPLE1BQU0sV0FBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUIsSUFBSUUsT0FBTyxHQUFHRixPQUFPLENBQUMsU0FBUyxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxTQUFTRyxJQUFJQSxDQUFDQyxRQUFRLEVBQUU7RUFDeEI7RUFDQSxJQUFJQyxNQUFNLEdBQUcsa0JBQWtCO0VBQy9CLElBQUlDLFNBQVMsR0FBRyxrQ0FBa0M7O0VBRWxEO0VBQ0EsSUFBSUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7RUFFN0M7RUFDQSxJQUFJQyxHQUFHLEdBQUc7SUFDTkMsTUFBTSxFQUFFLEtBQUs7SUFDYkMsSUFBSSxFQUFFLG1CQUFtQixHQUFHVixRQUFRO0lBQ3BDVyxJQUFJLEVBQUU7RUFDVixDQUFDO0VBRUQsSUFBSUMsT0FBTyxHQUFHVCxTQUFTLEdBQUdLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRCxHQUFHLENBQUNFLElBQUksR0FBR0YsR0FBRyxDQUFDRyxJQUFJO0VBQzFEOztFQUVBO0VBQ0EsSUFBSUUsU0FBUyxHQUFHaEIsTUFBTSxDQUFDaUIsVUFBVSxDQUFDLFFBQVEsRUFBRVosU0FBUyxDQUFDLENBQUNhLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0VBRXBGO0VBQ0EsSUFBSUMsT0FBTyxHQUFHO0lBQ1ZDLE9BQU8sRUFBRSwyQkFBMkI7SUFDcENDLEdBQUcsRUFBRVgsR0FBRyxDQUFDRSxJQUFJO0lBQ2JELE1BQU0sRUFBRUQsR0FBRyxDQUFDQyxNQUFNO0lBQ2xCVyxPQUFPLEVBQUU7TUFDTCxnQkFBZ0IsRUFBRVAsU0FBUztNQUMzQixxQkFBcUIsRUFBRVYsU0FBUztNQUNoQyxlQUFlLEVBQUVGLE1BQU07TUFDdkIsWUFBWSxFQUFFO0lBQ2xCO0VBQ0osQ0FBQztFQUVESCxPQUFPLENBQUNtQixPQUFPLEVBQUMsVUFBU0ksR0FBRyxFQUFFQyxRQUFRLEVBQUM7SUFDbkMsSUFBSUQsR0FBRyxFQUFFRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDO0lBQ3pCRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsUUFBUSxDQUFDWCxJQUFJLENBQUM7RUFDOUIsQ0FBQyxDQUFDO0FBRUY7QUFDQSxlQUFlWixJQUFJIn0=