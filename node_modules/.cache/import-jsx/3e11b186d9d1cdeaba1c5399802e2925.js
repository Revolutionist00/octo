import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import request from 'request';
//const test = require('./test.cjs');
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
//var request = require('request');

var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first'
    //		test.send(item.value);

    var apiKey = '2q7DfBj1Gcik5lBE';
    var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
    var timestamp = Math.floor(Date.now() / 1000);
    var req = {
      method: 'GET',
      path: '/api/v3/brokerage/' + item.value,
      body: ''
    };
    var message = timestamp + req.method + req.path + req.body;
    var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
    var options = {
      baseUrl: 'https://api.coinbase.com/',
      url: req.path,
      method: req.method,
      headers: {
        'CB-ACCESS-SIGN': signature,
        'CB-ACCESS-TIMESTAMP': timestamp,
        'CB-ACCESS-KEY': apiKey,
        'CB-VERSION': '2015-07-22'
      }
    };
    request(options, function (err, response) {
      if (err) console.log(err);
      console.log(response.body);
    });
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));

//   .then send(result) =>
//	console.log(output)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInJlcXVlc3QiLCJqc3giLCJfanN4IiwiY3J5cHRvIiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsIk9wdGlvbnMxIiwiaGFuZGxlU2VsZWN0IiwiaXRlbSIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwidmFsdWUiLCJib2R5IiwibWVzc2FnZSIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJlcnIiLCJyZXNwb25zZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlanMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdCdcbi8vY29uc3QgdGVzdCA9IHJlcXVpcmUoJy4vdGVzdC5janMnKTtcbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbi8vdmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbnZhciBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCdcbi8vXHRcdHRlc3Quc2VuZChpdGVtLnZhbHVlKTtcblxudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIGl0ZW0udmFsdWUsXG4gICAgYm9keTogJydcbn07XG5cbnZhciBtZXNzYWdlID0gdGltZXN0YW1wICsgcmVxLm1ldGhvZCArIHJlcS5wYXRoICsgcmVxLmJvZHk7XG5cbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cbnJlcXVlc3Qob3B0aW9ucyxmdW5jdGlvbihlcnIsIHJlc3BvbnNlKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmJvZHkpO1xufSk7XG59O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcblxuXG4vLyAgIC50aGVuIHNlbmQocmVzdWx0KSA9PlxuLy9cdGNvbnNvbGUubG9nKG91dHB1dClcbiJdLCJtYXBw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