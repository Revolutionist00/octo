import './cli.js';
//import * as crypto from 'crypto-js';
const requirejs = require('requirejs');
const crypto = require('crypto-js');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlanMiLCJyZXF1aXJlIiwiY3J5cHRvIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJyZXNvdXJjZSIsImJvZHkiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJyZXF1ZXN0IiwiZXJyIiwicmVzcG9uc2UiXSwic291cmNlcyI6WyJ0ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9jbGkuanMnO1xuLy9pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvLWpzJztcbmNvbnN0IHJlcXVpcmVqcyA9IHJlcXVpcmUoJ3JlcXVpcmVqcycpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG5cbi8vIG5wbSBpbnN0YWxsIGNyeXB0b1xuLy92YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG4vLyBucG0gaW5zdGFsbCByZXF1ZXN0XG4vL3ZhciByZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdCcpO1xuXG4vLyBTZXQgdGhlc2UgaW4geW91ciBlbnZpcm9ubWVudCwgb3IgZW50ZXIgdGhlbSBoZXJlIHdpdGggdGhlIGFjdHVhbCBzdHJpbmdcbnZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG52YXIgYXBpU2VjcmV0ID0gJ0FydERiWTM2MnlXZVczNXdodVhOZVF6WUM1bnVuRlRXJztcblxuLy9nZXQgdW5peCB0aW1lIGluIHNlY29uZHNcbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuLy8gc2V0IHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSByZXF1ZXN0IG1lc3NhZ2VcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbi8vY3JlYXRlIGEgaGV4ZWRlY2ltYWwgZW5jb2RlZCBTSEEyNTYgc2lnbmF0dXJlIG9mIHRoZSBtZXNzYWdlXG52YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFVBQVU7QUFDakI7QUFDQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDdEMsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsV0FBVyxDQUFDOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUlFLE1BQU0sR0FBRyxrQkFBa0I7QUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQzs7QUFFbEQ7QUFDQSxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUU3QztBQUNBLElBQUlDLEdBQUcsR0FBRztFQUNOQyxNQUFNLEVBQUUsS0FBSztFQUNiQyxJQUFJLEVBQUUsb0JBQW9CLEdBQUdDLFFBQVE7RUFDckNDLElBQUksRUFBRTtBQUNWLENBQUM7QUFFRCxJQUFJQyxPQUFPLEdBQUdWLFNBQVMsR0FBR0ssR0FBRyxDQUFDQyxNQUFNLEdBQUdELEdBQUcsQ0FBQ0UsSUFBSSxHQUFHRixHQUFHLENBQUNJLElBQUk7QUFDMURFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixPQUFPLENBQUM7O0FBRXBCO0FBQ0EsSUFBSUcsU0FBUyxHQUFHaEIsTUFBTSxDQUFDaUIsVUFBVSxDQUFDLFFBQVEsRUFBRWYsU0FBUyxDQUFDLENBQUNnQixNQUFNLENBQUNMLE9BQU8sQ0FBQyxDQUFDTSxNQUFNLENBQUMsS0FBSyxDQUFDOztBQUVwRjtBQUNBLElBQUlDLE9BQU8sR0FBRztFQUNWQyxPQUFPLEVBQUUsMkJBQTJCO0VBQ3BDQyxHQUFHLEVBQUVkLEdBQUcsQ0FBQ0UsSUFBSTtFQUNiRCxNQUFNLEVBQUVELEdBQUcsQ0FBQ0MsTUFBTTtFQUNsQmMsT0FBTyxFQUFFO0lBQ0wsZ0JBQWdCLEVBQUVQLFNBQVM7SUFDM0IscUJBQXFCLEVBQUViLFNBQVM7SUFDaEMsZUFBZSxFQUFFRixNQUFNO0lBQ3ZCLFlBQVksRUFBRTtFQUNsQjtBQUNKLENBQUM7QUFFRHVCLE9BQU8sQ0FBQ0osT0FBTyxFQUFDLFVBQVNLLEdBQUcsRUFBRUMsUUFBUSxFQUFDO0VBQ25DLElBQUlELEdBQUcsRUFBRVgsT0FBTyxDQUFDQyxHQUFHLENBQUNVLEdBQUcsQ0FBQztFQUN6QlgsT0FBTyxDQUFDQyxHQUFHLENBQUNXLFFBQVEsQ0FBQ2QsSUFBSSxDQUFDO0FBQzlCLENBQUMsQ0FBQyJ9