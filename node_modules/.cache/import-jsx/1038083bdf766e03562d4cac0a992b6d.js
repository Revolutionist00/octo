import require from 'requirejs';
import srlect from './cli.js';
//import * as crypto from 'crypto-js';
//const requirejs = require('requirejs');
var crypto = require('crypto');
var request = require('request');

// npm install crypto
//var crypto = require('crypto-js');
// npm install request
function send(resource) {
  // Set these in your environment, or enter them here with the actual string
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

  //get unix time in seconds
  var timestamp = Math.floor(Date.now() / 1000);

  // set the parameter for the request message
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;
  //console.log(message);

  //create a hexedecimal encoded SHA256 signature of the message
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

  //create the request options object
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
export default send;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwic3JsZWN0IiwiY3J5cHRvIiwicmVxdWVzdCIsInNlbmQiLCJyZXNvdXJjZSIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwiYm9keSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwib3B0aW9ucyIsImJhc2VVcmwiLCJ1cmwiLCJoZWFkZXJzIiwiZXJyIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsidGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWlyZSBmcm9tICdyZXF1aXJlanMnXG5pbXBvcnQgc3JsZWN0IGZyb20gJy4vY2xpLmpzJztcbi8vaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0by1qcyc7XG4vL2NvbnN0IHJlcXVpcmVqcyA9IHJlcXVpcmUoJ3JlcXVpcmVqcycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdyZXF1ZXN0Jyk7XG5cbi8vIG5wbSBpbnN0YWxsIGNyeXB0b1xuLy92YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG4vLyBucG0gaW5zdGFsbCByZXF1ZXN0XG5mdW5jdGlvbiBzZW5kKHJlc291cmNlKSB7XG4vLyBTZXQgdGhlc2UgaW4geW91ciBlbnZpcm9ubWVudCwgb3IgZW50ZXIgdGhlbSBoZXJlIHdpdGggdGhlIGFjdHVhbCBzdHJpbmdcbnZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG52YXIgYXBpU2VjcmV0ID0gJ0FydERiWTM2MnlXZVczNXdodVhOZVF6WUM1bnVuRlRXJztcblxuLy9nZXQgdW5peCB0aW1lIGluIHNlY29uZHNcbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuLy8gc2V0IHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSByZXF1ZXN0IG1lc3NhZ2VcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuLy9jb25zb2xlLmxvZyhtZXNzYWdlKTtcblxuLy9jcmVhdGUgYSBoZXhlZGVjaW1hbCBlbmNvZGVkIFNIQTI1NiBzaWduYXR1cmUgb2YgdGhlIG1lc3NhZ2VcbnZhciBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBhcGlTZWNyZXQpLnVwZGF0ZShtZXNzYWdlKS5kaWdlc3QoXCJoZXhcIik7XG5cbi8vY3JlYXRlIHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0XG52YXIgb3B0aW9ucyA9IHtcbiAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuY29pbmJhc2UuY29tLycsXG4gICAgdXJsOiByZXEucGF0aCxcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgICAnQ0ItQUNDRVNTLVNJR04nOiBzaWduYXR1cmUsXG4gICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogdGltZXN0YW1wLFxuICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IGFwaUtleSxcbiAgICAgICAgJ0NCLVZFUlNJT04nOiAnMjAxNS0wNy0yMidcbiAgICB9XG59O1xuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG59XG5leHBvcnQgZGVmYXVsdCBzZW5kXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQU8sTUFBTSxXQUFXO0FBQy9CLE9BQU9DLE1BQU0sTUFBTSxVQUFVO0FBQzdCO0FBQ0E7QUFDQSxJQUFJQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUIsSUFBSUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsU0FBUyxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxTQUFTSSxJQUFJQSxDQUFDQyxRQUFRLEVBQUU7RUFDeEI7RUFDQSxJQUFJQyxNQUFNLEdBQUcsa0JBQWtCO0VBQy9CLElBQUlDLFNBQVMsR0FBRyxrQ0FBa0M7O0VBRWxEO0VBQ0EsSUFBSUMsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7RUFFN0M7RUFDQSxJQUFJQyxHQUFHLEdBQUc7SUFDTkMsTUFBTSxFQUFFLEtBQUs7SUFDYkMsSUFBSSxFQUFFLG9CQUFvQixHQUFHVixRQUFRO0lBQ3JDVyxJQUFJLEVBQUU7RUFDVixDQUFDO0VBRUQsSUFBSUMsT0FBTyxHQUFHVCxTQUFTLEdBQUdLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRCxHQUFHLENBQUNFLElBQUksR0FBR0YsR0FBRyxDQUFDRyxJQUFJO0VBQzFEOztFQUVBO0VBQ0EsSUFBSUUsU0FBUyxHQUFHaEIsTUFBTSxDQUFDaUIsVUFBVSxDQUFDLFFBQVEsRUFBRVosU0FBUyxDQUFDLENBQUNhLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0VBRXBGO0VBQ0EsSUFBSUMsT0FBTyxHQUFHO0lBQ1ZDLE9BQU8sRUFBRSwyQkFBMkI7SUFDcENDLEdBQUcsRUFBRVgsR0FBRyxDQUFDRSxJQUFJO0lBQ2JELE1BQU0sRUFBRUQsR0FBRyxDQUFDQyxNQUFNO0lBQ2xCVyxPQUFPLEVBQUU7TUFDTCxnQkFBZ0IsRUFBRVAsU0FBUztNQUMzQixxQkFBcUIsRUFBRVYsU0FBUztNQUNoQyxlQUFlLEVBQUVGLE1BQU07TUFDdkIsWUFBWSxFQUFFO0lBQ2xCO0VBQ0osQ0FBQztFQUVESCxPQUFPLENBQUNtQixPQUFPLEVBQUMsVUFBU0ksR0FBRyxFQUFFQyxRQUFRLEVBQUM7SUFDbkMsSUFBSUQsR0FBRyxFQUFFRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDO0lBQ3pCRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsUUFBUSxDQUFDWCxJQUFJLENBQUM7RUFDOUIsQ0FBQyxDQUFDO0FBRUY7QUFDQSxlQUFlWixJQUFJIn0=