import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import 'crypto-js';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
var crypto = crypto - js();
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwianN4IiwiX2pzeCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJjcnlwdG8iLCJqcyIsImFwaUtleSIsImFwaVNlY3JldCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXEiLCJtZXRob2QiLCJwYXRoIiwiYm9keSIsIm1lc3NhZ2UiLCJzaWduYXR1cmUiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwib3B0aW9ucyIsImJhc2VVcmwiLCJ1cmwiLCJoZWFkZXJzIiwicmVxdWVzdCIsImVyciIsInJlc3BvbnNlIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0ICdjcnlwdG8tanMnXG5jb25zdCBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG4vL2NvbnN0IENyeXB0b0pTID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG5cbi8vIG5wbSBpbnN0YWxsIGNyeXB0b1xudmFyIGNyeXB0byA9IGNyeXB0by1qcygpO1xuLy8gbnBtIGluc3RhbGwgcmVxdWVzdFxuLy92YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxuLy8gU2V0IHRoZXNlIGluIHlvdXIgZW52aXJvbm1lbnQsIG9yIGVudGVyIHRoZW0gaGVyZSB3aXRoIHRoZSBhY3R1YWwgc3RyaW5nXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbi8vZ2V0IHVuaXggdGltZSBpbiBzZWNvbmRzXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbi8vIHNldCB0aGUgcGFyYW1ldGVyIGZvciB0aGUgcmVxdWVzdCBtZXNzYWdlXG52YXIgcmVxID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcbmNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXG4vL2NyZWF0ZSBhIGhleGVkZWNpbWFsIGVuY29kZWQgU0hBMjU2IHNpZ25hdHVyZSBvZiB0aGUgbWVzc2FnZVxudmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcblxuLy9jcmVhdGUgdGhlIHJlcXVlc3Qgb3B0aW9ucyBvYmplY3RcbnZhciBvcHRpb25zID0ge1xuICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5jb2luYmFzZS5jb20vJyxcbiAgICB1cmw6IHJlcS5wYXRoLFxuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHNpZ25hdHVyZSxcbiAgICAgICAgJ0NCLUFDQ0VTUy1USU1FU1RBTVAnOiB0aW1lc3RhbXAsXG4gICAgICAgICdDQi1BQ0NFU1MtS0VZJzogYXBpS2V5LFxuICAgICAgICAnQ0ItVkVSU0lPTic6ICcyMDE1LTA3LTIyJ1xuICAgIH1cbn07XG5cblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcblxuXG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCcgfVxuXHRcdGNvbnNvbGUubG9nKHJlc291cmNlID0gaXRlbS52YWx1ZSlcblx0fTtcblxuXHRjb25zdCBpdGVtcyA9IFtcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEFjY291bnRzJyxcblx0XHR2YWx1ZTogJy9hY2NvdW50cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0NhbmNlbCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9iYXRjaF9jYW5jZWwnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvYmF0Y2gnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IEZpbGxzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9maWxscydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBCZXN0IEJpZC9Bc2snLFxuXHRcdHZhbHVlOiAnL2Jlc3RfYmlkX2Fzaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBQcm9kdWN0IEJvb2snLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RfYm9vaydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgUHJvZHVjdHMnLFxuXHRcdHZhbHVlOiAnL3Byb2R1Y3RzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFRyYW4tc2FjdGlvbnMgU3VtbWFyeScsXG5cdFx0dmFsdWU6ICcvdHJhbnNhY3Rpb25fc3VtbWFyeSdcblx0XHR9XG5cdF07XG5cblx0cmV0dXJuIDxTZWxlY3RJbnB1dCBpdGVtcz17aXRlbXN9IG9uU2VsZWN0PXtoYW5kbGVTZWxlY3R9IC8+O1xufTtcblxucmVuZGVyKDxPcHRpb25zMSAvPik7XG4vL2V4cG9ydCBkZWZhdWx0IHJlc291cmNlID0gaXRlbS52YWx1ZVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUN6QixTQUFRQyxNQUFNLFFBQU8sS0FBSztBQUMxQixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU8sV0FBVztBQUFBLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUNsQixNQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWpDLFFBQVFILEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUk7SUFDTCxJQUFJSSxRQUFRLEdBQUcsV0FBVztJQUNqQztFQUNHLEtBQUssSUFBSTtJQUNaLElBQUlBLFFBQVEsR0FBRyxXQUFXO0lBQzFCO0VBQ0c7SUFBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ2hCLEtBQUssQ0FBQztBQUNkO0FBQUM7O0FBRUQ7O0FBRUE7QUFDQSxJQUFJQyxNQUFNLEdBQUdBLE1BQU0sR0FBQ0MsRUFBRSxDQUFDLENBQUM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBLElBQUlDLE1BQU0sR0FBRyxrQkFBa0I7QUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQzs7QUFFbEQ7QUFDQSxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOztBQUU3QztBQUNBLElBQUlDLEdBQUcsR0FB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