import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import test, { send } from './test.cjs';
//const test = require('./test.cjs');
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first'
    //		test.send(item.value);

    var apiKey = '2q7DfBj1Gcik5lBE';
    var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
    var timestamp = Math.floor(Date.now() / 1000);
    var req = {
      method: 'GET',
      path: '/api/v3/brokerage/' + item.value,
      body: ''
    };
    var message = timestamp + req.method + req.path + req.body;
    var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
    var options = {
      baseUrl: 'https://api.coinbase.com/',
      url: req.path,
      method: req.method,
      headers: {
        'CB-ACCESS-SIGN': signature,
        'CB-ACCESS-TIMESTAMP': timestamp,
        'CB-ACCESS-KEY': apiKey,
        'CB-VERSION': '2015-07-22'
      }
    };
    request(options, function (err, response) {
      if (err) console.log(err);
      console.log(response.body);
    });
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));

//   .then send(result) =>
//	console.log(output)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsInRlc3QiLCJzZW5kIiwianN4IiwiX2pzeCIsImNyeXB0byIsInJlcXVlc3QiLCJhcmciLCJwcm9jZXNzIiwiYXJndiIsInNsaWNlIiwicmVzb3VyY2UiLCJjb25zb2xlIiwibG9nIiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJ2YWx1ZSIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsImVyciIsInJlc3BvbnNlIiwiaXRlbXMiLCJsYWJlbCIsIm9uU2VsZWN0Il0sInNvdXJjZXMiOlsiY2xpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnaW5rJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICdpbmstc2VsZWN0LWlucHV0JztcbmltcG9ydCByZXF1aXJlIGZyb20gJ3JlcXVpcmVqcyc7XG5pbXBvcnQgdGVzdCwgeyBzZW5kIH0gZnJvbSAnLi90ZXN0LmNqcyc7XG4vL2NvbnN0IHRlc3QgPSByZXF1aXJlKCcuL3Rlc3QuY2pzJyk7XG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxudmFyIGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0J1xuLy9cdFx0dGVzdC5zZW5kKGl0ZW0udmFsdWUpO1xuXG52YXIgYXBpS2V5ID0gJzJxN0RmQmoxR2NpazVsQkUnO1xudmFyIGFwaVNlY3JldCA9ICdBcnREYlkzNjJ5V2VXMzV3aHVYTmVRellDNW51bkZUVyc7XG5cbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgaXRlbS52YWx1ZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcblxudmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcblxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcbn07XG5cblx0Y29uc3QgaXRlbXMgPSBbXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBBY2NvdW50cycsXG5cdFx0dmFsdWU6ICcvYWNjb3VudHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdDYW5jZWwgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvYmF0Y2hfY2FuY2VsJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2JhdGNoJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBGaWxscycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvZmlsbHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgQmVzdCBCaWQvQXNrJyxcblx0XHR2YWx1ZTogJy9iZXN0X2JpZF9hc2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgUHJvZHVjdCBCb29rJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0X2Jvb2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IFByb2R1Y3RzJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBUcmFuLXNhY3Rpb25zIFN1bW1hcnknLFxuXHRcdHZhbHVlOiAnL3RyYW5zYWN0aW9uX3N1bW1hcnknXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSAvPjtcbn07XG5cbnJlbmRlcig8T3B0aW9uczEgLz4pO1xuXG5cbi8vICAgLnRoZW4gc2VuZChyZXN1bHQpID0+XG4vL1x0Y29uc29sZS5sb2cob3V0cHV0KVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUN6QixTQUFRQyxNQUFNLFFBQU8sS0FBSztBQUMxQixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLE9BQU8sTUFBTSxXQUFXO0FBQy9CLE9BQU9DLElBQUksSUFBSUMsSUFBSSxRQUFRLFlBQVk7QUFDdkM7QUFBQSxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFDQSxJQUFJQyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDOUIsSUFBSU0sT0FBTyxHQUFHTixPQUFPLENBQUMsU0FBUyxDQUFDO0FBRWhDLElBQUlPLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFL0IsUUFBUUgsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNWLEtBQUssSUFBSTtJQUNMLElBQUlJLFFBQVEsR0FBRyxXQUFXO0lBQ2pDO0VBQ0csS0FBSyxJQUFJO0lBQ1osSUFBSUEsUUFBUSxHQUFHLFdBQVc7SUFDMUI7RUFDRztJQUFTQyxPQUFPLENBQUNDLEdBQUcsQ0FDaEIsS0FBSyxDQUFDO0FBQ2Q7QUFBQztBQUVELE1BQU1DLFFBQVEsR0FBR0EsQ0FBQSxLQUFNO0VBQ3RCLE1BQU1DLFlBQVksR0FBR0MsSUFBSSxJQUFJO0lBQzVCO0lBQ0Y7O0lBRUEsSUFBSUMsTUFBTSxHQUFHLGtCQUFrQjtJQUMvQixJQUFJQyxTQUFTLEdBQUcsa0NBQWtDO0lBRWxELElBQUlDLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFN0MsSUFBSUMsR0FBRyxHQUFHO01BQ05DLE1BQU0sRUFBRSxLQUFLO01BQ2JDLElBQUksRUFBRSxvQkFBb0IsR0FBR1YsSUFBSSxDQUFDVyxLQUFLO01BQ3ZDQyxJQUFJLEVBQUU7SUFDVixDQUFDO0lBRUQsSUFBSUMsT0FBTyxHQUFHVixTQUFTLEdBQUdLLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHRCxHQUFHLENBQUNFLElBQUksR0FBR0YsR0FBRyxDQUFDSSxJQUFJO0lBRTFELElBQUlFLFNBQVMsR0FBR3pCLE1BQU0sQ0FBQzBCLFVBQVUsQ0FBQyxRQUFRLEVBQUViLFNBQVMsQ0FBQyxDQUFDYyxNQUFNLENBQUNILE9BQU8sQ0FBQyxDQUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDO0lBRXBGLElBQUlDLE9BQU8sR0FBRztNQUNWQyxPQUFPLEVBQUUsMkJBQTJCO01BQ3BDQyxHQUFHLEVBQUVaLEdBQUcsQ0FBQ0UsSUFBSTtNQUNiRCxNQUFNLEVBQUVELEdBQUcsQ0FBQ0MsTUFBTTtNQUNsQlksT0FBTyxFQUFFO1FBQ0wsZ0JBQWdCLEVBQUVQLFNBQVM7UUFDM0IscUJBQXFCLEVBQUVYLFNBQVM7UUFDaEMsZUFBZSxFQUFFRixNQUFNO1FBQ3ZCLFlBQVksRUFBRTtNQUNsQjtJQUNKLENBQUM7SUFFRFgsT0FBTyxDQUFDNEIsT0FBTyxFQUFDLFVBQVNJLEdBQUcsRUFBRUMsUUFBUSxFQUFDO01BQ25DLElBQUlELEdBQUcsRUFBRTFCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDeUIsR0FBRyxDQUFDO01BQ3pCMUIsT0FBTyxDQUFDQyxHQUFHLENBQUMwQixRQUFRLENBQUNYLElBQUksQ0FBQztJQUM5QixDQUFDLENBQUM7RUFDRixDQUFDO0VBRUEsTUFBTVksS0FBSyxHQUFHLENBQ2I7SUFDQUMsS0FBSyxFQUFFLGVBQWU7SUFDdEJkLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBYyxLQUFLLEVBQUUsZUFBZTtJQUN0QmQsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FjLEtBQUssRUFBRSxhQUFhO0lBQ3BCZCxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQWMsS0FBSyxFQUFFLFlBQVk7SUFDbkJkLEtBQUssRUFBRTtFQUNQLENBQUMsRUFDRDtJQUNBYyxLQUFLLEVBQUUsa0JBQWtCO0lBQ3pCZCxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQWMsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QmQsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxFQUNEO0lBQ0FjLEtBQUssRUFBRSxlQUFlO0lBQ3RCZCxLQUFLLEVBQUU7RUFDUCxDQUFDLEVBQ0Q7SUFDQWMsS0FBSyxFQUFFLDJCQUEyQjtJQUNsQ2QsS0FBSyxFQUFFO0VBQ1AsQ0FBQyxDQUNEO0VBRUQsT0FBT3ZCLElBQUEsQ0FBQ0wsV0FBVztJQUFDeUMsS0FBSyxFQUFFQSxLQUFNO0lBQUNFLFFBQVEsRUFBRTNCO0VBQWEsQ0FBRSxDQUFDO0FBQzdELENBQUM7QUFFRGpCLE1BQU0sQ0FBQ00sSUFBQSxDQUFDVSxRQUFRLElBQUUsQ0FBQyxDQUFDOztBQUdwQjtBQUNBIn0=