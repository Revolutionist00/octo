import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import 'crypto-js';
import 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;

//const CryptoJS = require('crypto-js');

// npm install crypto
var crypto = require('crypto-js');
// npm install request
//var request = require('request');

// Set these in your environment, or enter them here with the actual string
var apiKey = '2q7DfBj1Gcik5lBE';
var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';

//get unix time in seconds
var timestamp = Math.floor(Date.now() / 1000);

// set the parameter for the request message
var req = {
  method: 'GET',
  path: '/api/v3/brokerage/' + resource,
  body: ''
};
var message = timestamp + req.method + req.path + req.body;
console.log(message);

//create a hexedecimal encoded SHA256 signature of the message
var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");

//create the request options object
var options = {
  baseUrl: 'https://api.coinbase.com/',
  url: req.path,
  method: req.method,
  headers: {
    'CB-ACCESS-SIGN': signature,
    'CB-ACCESS-TIMESTAMP': timestamp,
    'CB-ACCESS-KEY': apiKey,
    'CB-VERSION': '2015-07-22'
  }
};
request(options, function (err, response) {
  if (err) console.log(err);
  console.log(response.body);
});
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    console.log(resource = item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwianN4IiwiX2pzeCIsImFyZyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXNvdXJjZSIsImNvbnNvbGUiLCJsb2ciLCJjcnlwdG8iLCJyZXF1aXJlIiwiYXBpS2V5IiwiYXBpU2VjcmV0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsInJlcSIsIm1ldGhvZCIsInBhdGgiLCJib2R5IiwibWVzc2FnZSIsInNpZ25hdHVyZSIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJvcHRpb25zIiwiYmFzZVVybCIsInVybCIsImhlYWRlcnMiLCJyZXF1ZXN0IiwiZXJyIiwicmVzcG9uc2UiLCJPcHRpb25zMSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJ2YWx1ZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgJ2NyeXB0by1qcyc7XG5pbXBvcnQgJ3JlcXVpcmVqcyc7XG5cbmNvbnN0IGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbi8vY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCdjcnlwdG8tanMnKTtcblxuLy8gbnBtIGluc3RhbGwgY3J5cHRvXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG4vLyBucG0gaW5zdGFsbCByZXF1ZXN0XG4vL3ZhciByZXF1ZXN0ID0gcmVxdWlyZSgncmVxdWVzdCcpO1xuXG4vLyBTZXQgdGhlc2UgaW4geW91ciBlbnZpcm9ubWVudCwgb3IgZW50ZXIgdGhlbSBoZXJlIHdpdGggdGhlIGFjdHVhbCBzdHJpbmdcbnZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG52YXIgYXBpU2VjcmV0ID0gJ0FydERiWTM2MnlXZVczNXdodVhOZVF6WUM1bnVuRlRXJztcblxuLy9nZXQgdW5peCB0aW1lIGluIHNlY29uZHNcbnZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuLy8gc2V0IHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSByZXF1ZXN0IG1lc3NhZ2VcbnZhciByZXEgPSB7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBwYXRoOiAnL2FwaS92My9icm9rZXJhZ2UvJyArIHJlc291cmNlLFxuICAgIGJvZHk6ICcnXG59O1xuXG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbi8vY3JlYXRlIGEgaGV4ZWRlY2ltYWwgZW5jb2RlZCBTSEEyNTYgc2lnbmF0dXJlIG9mIHRoZSBtZXNzYWdlXG52YXIgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgYXBpU2VjcmV0KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KFwiaGV4XCIpO1xuXG4vL2NyZWF0ZSB0aGUgcmVxdWVzdCBvcHRpb25zIG9iamVjdFxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxuXG5yZXF1ZXN0KG9wdGlvbnMsZnVuY3Rpb24oZXJyLCByZXNwb25zZSl7XG4gICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5ib2R5KTtcbn0pO1xuXG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0JyB9XG5cdFx0Y29uc29sZS5sb2cocmVzb3VyY2UgPSBpdGVtLnZhbHVlKVxuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcbi8vZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2UgPSBpdGVtLnZhbHVlXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sV0FBVztBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUVuQixNQUFNQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRWpDLFFBQVFILEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDVixLQUFLLElBQUk7SUFDTCxJQUFJSSxRQUFRLEdBQUcsV0FBVztJQUNqQztFQUNHLEtBQUssSUFBSTtJQUNaLElBQUlBLFFBQVEsR0FBRyxXQUFXO0lBQzFCO0VBQ0c7SUFBU0MsT0FBTyxDQUFDQyxHQUFHLENBQ2hCLEtBQUssQ0FBQztBQUNkO0FBQUM7O0FBRUQ7O0FBRUE7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDakM7QUFDQTs7QUFFQTtBQUNBLElBQUlDLE1BQU0sR0FBRyxrQkFBa0I7QUFDL0IsSUFBSUMsU0FBUyxHQUFHLGtDQUFrQzs7QUFFbEQ7QUFDQSxJQUFJQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FB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