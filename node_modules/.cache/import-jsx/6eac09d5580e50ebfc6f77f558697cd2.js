import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import hmacSHA256 from 'crypto-js/hmac-sha256.js';
import Base16 from 'crypto-js/enc-hex.js';
import request from 'request';
import { jsx as _jsx } from "react/jsx-runtime";
const arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function send(resource) {
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
  var timestamp = Math.floor(Date.now() / 1000);
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;
  const signature = Base16.stringify(hmacSHA256(message, apiSecret));
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
;
const Options1 = () => {
  const handleSelect = item => {
    // `item` = { label: 'First', value: 'first' }
    send(item.value);
  };
  const items = [{
    label: 'List Accounts',
    value: '/accounts'
  }, {
    label: 'Cancel Orders',
    value: '/orders/batch_cancel'
  }, {
    label: 'List Orders',
    value: '/orders/historical/batch'
  }, {
    label: 'List Fills',
    value: '/orders/historical/fills'
  }, {
    label: 'Get Best Bid/Ask',
    value: '/best_bid_ask'
  }, {
    label: 'Get Product Book',
    value: '/product_book'
  }, {
    label: 'List Products',
    value: '/products'
  }, {
    label: 'Get Tran-sactions Summary',
    value: '/transaction_summary'
  }];
  return _jsx(SelectInput, {
    items: items,
    onSelect: handleSelect
  });
};
render(_jsx(Options1, {}));
//export default resource = item.value
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwiaG1hY1NIQTI1NiIsIkJhc2UxNiIsInJlcXVlc3QiLCJqc3giLCJfanN4IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwic3RyaW5naWZ5Iiwib3B0aW9ucyIsImJhc2VVcmwiLCJ1cmwiLCJoZWFkZXJzIiwiZXJyIiwicmVzcG9uc2UiLCJPcHRpb25zMSIsImhhbmRsZVNlbGVjdCIsIml0ZW0iLCJ2YWx1ZSIsIml0ZW1zIiwibGFiZWwiLCJvblNlbGVjdCJdLCJzb3VyY2VzIjpbImNsaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2luayc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnaW5rLXNlbGVjdC1pbnB1dCc7XG5pbXBvcnQgaG1hY1NIQTI1NiBmcm9tICdjcnlwdG8tanMvaG1hYy1zaGEyNTYuanMnO1xuaW1wb3J0IEJhc2UxNiBmcm9tICdjcnlwdG8tanMvZW5jLWhleC5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0J1xuXG5jb25zdCBhcmcgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbnN3aXRjaCAoYXJnWzBdKSB7XG4gICAgY2FzZSAnLWwnOlxuICAgICAgICB2YXIgcmVzb3VyY2UgPSAnL3Byb2R1Y3RzJ1xuXHRicmVhaztcbiAgICBjYXNlICctYSc6XG5cdHZhciByZXNvdXJjZSA9ICcvYWNjb3VudHMnXG5cdGJyZWFrO1xuICAgIGRlZmF1bHQ6IGNvbnNvbGUubG9nKFxuICAgICAgICAndW5kJyk7XG59O1xuXG5mdW5jdGlvbiBzZW5kKHJlc291cmNlKSB7XG5cbnZhciBhcGlLZXkgPSAnMnE3RGZCajFHY2lrNWxCRSc7XG52YXIgYXBpU2VjcmV0ID0gJ0FydERiWTM2MnlXZVczNXdodVhOZVF6WUM1bnVuRlRXJztcblxudmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xudmFyIHJlcSA9IHtcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIHBhdGg6ICcvYXBpL3YzL2Jyb2tlcmFnZS8nICsgcmVzb3VyY2UsXG4gICAgYm9keTogJydcbn07XG52YXIgbWVzc2FnZSA9IHRpbWVzdGFtcCArIHJlcS5tZXRob2QgKyByZXEucGF0aCArIHJlcS5ib2R5O1xuY29uc3Qgc2lnbmF0dXJlID0gQmFzZTE2LnN0cmluZ2lmeShobWFjU0hBMjU2KG1lc3NhZ2UsIGFwaVNlY3JldCkpO1xudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcbn07XG5cbmNvbnN0IE9wdGlvbnMxID0gKCkgPT4ge1xuXHRjb25zdCBoYW5kbGVTZWxlY3QgPSBpdGVtID0+IHtcblx0XHQvLyBgaXRlbWAgPSB7IGxhYmVsOiAnRmlyc3QnLCB2YWx1ZTogJ2ZpcnN0JyB9XG5cdFx0c2VuZChpdGVtLnZhbHVlKVxuXHR9O1xuXG5cdGNvbnN0IGl0ZW1zID0gW1xuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgQWNjb3VudHMnLFxuXHRcdHZhbHVlOiAnL2FjY291bnRzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnQ2FuY2VsIE9yZGVycycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2JhdGNoX2NhbmNlbCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvaGlzdG9yaWNhbC9iYXRjaCdcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0xpc3QgRmlsbHMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2ZpbGxzJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IEJlc3QgQmlkL0FzaycsXG5cdFx0dmFsdWU6ICcvYmVzdF9iaWRfYXNrJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnR2V0IFByb2R1Y3QgQm9vaycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdF9ib29rJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBQcm9kdWN0cycsXG5cdFx0dmFsdWU6ICcvcHJvZHVjdHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgVHJhbi1zYWN0aW9ucyBTdW1tYXJ5Jyxcblx0XHR2YWx1ZTogJy90cmFuc2FjdGlvbl9zdW1tYXJ5J1xuXHRcdH1cblx0XTtcblxuXHRyZXR1cm4gPFNlbGVjdElucHV0IGl0ZW1zPXtpdGVtc30gb25TZWxlY3Q9e2hhbmRsZVNlbGVjdH0gLz47XG59O1xuXG5yZW5kZXIoPE9wdGlvbnMxIC8+KTtcbi8vZXhwb3J0IGRlZmF1bHQgcmVzb3VyY2UgPSBpdGVtLnZhbHVlXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQUssTUFBTSxPQUFPO0FBQ3pCLFNBQVFDLE1BQU0sUUFBTyxLQUFLO0FBQzFCLE9BQU9DLFdB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