import React from 'react';
import { render } from 'ink';
import SelectInput from 'ink-select-input';
import require from 'requirejs';
import { jsx as _jsx } from "react/jsx-runtime";
var crypto = require('crypto');
var request = require('request');
var arg = process.argv.slice(2);
switch (arg[0]) {
  case '-l':
    var resource = '/products';
    break;
  case '-a':
    var resource = '/accounts';
    break;
  default:
    console.log('und');
}
;
function send(resource) {
  var apiKey = '2q7DfBj1Gcik5lBE';
  var apiSecret = 'ArtDbY362yWeW35whuXNeQzYC5nunFTW';
  var timestamp = Math.floor(Date.now() / 1000);
  var req = {
    method: 'GET',
    path: '/api/v3/brokerage/' + resource,
    body: ''
  };
  var message = timestamp + req.method + req.path + req.body;
  var signature = crypto.createHmac("sha256", apiSecret).update(message).digest("hex");
  var options = {
    baseUrl: 'https://api.coinbase.com/',
    url: req.path,
    method: req.method,
    headers: {
      'CB-ACCESS-SIGN': signature,
      'CB-ACCESS-TIMESTAMP': timestamp,
      'CB-ACCESS-KEY': apiKey,
      'CB-VERSION': '2015-07-22'
    }
  };
  request(options, function (err, response) {
    if (err) console.log(err);
    console.log(response.body);
  });
}
;
function select() {
  const Options1 = () => {
    const handleSelect = item => {
      // `item` = { label: 'First', value: 'first'
      send(item.value);
    };
    const items = [{
      label: 'List Accounts',
      value: '/accounts'
    }, {
      label: 'Cancel Orders',
      value: '/orders/batch_cancel'
    }, {
      label: 'List Orders',
      value: '/orders/historical/batch'
    }, {
      label: 'List Fills',
      value: '/orders/historical/fills'
    }, {
      label: 'Get Best Bid/Ask',
      value: '/best_bid_ask'
    }, {
      label: 'Get Product Book',
      value: '/product_book'
    }, {
      label: 'List Products',
      value: '/products'
    }, {
      label: 'Get Tran-sactions Summary',
      value: '/transaction_summary'
    }];
    return _jsx(SelectInput, {
      items: items,
      onSelect: handleSelect
    });
  };
  render(_jsx(Options1, {}));
  //export default resource = item.value
}

select();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlbmRlciIsIlNlbGVjdElucHV0IiwicmVxdWlyZSIsImpzeCIsIl9qc3giLCJjcnlwdG8iLCJyZXF1ZXN0IiwiYXJnIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsInJlc291cmNlIiwiY29uc29sZSIsImxvZyIsInNlbmQiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicmVxIiwibWV0aG9kIiwicGF0aCIsImJvZHkiLCJtZXNzYWdlIiwic2lnbmF0dXJlIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsIm9wdGlvbnMiLCJiYXNlVXJsIiwidXJsIiwiaGVhZGVycyIsImVyciIsInJlc3BvbnNlIiwic2VsZWN0IiwiT3B0aW9uczEiLCJoYW5kbGVTZWxlY3QiLCJpdGVtIiwidmFsdWUiLCJpdGVtcyIsImxhYmVsIiwib25TZWxlY3QiXSwic291cmNlcyI6WyJjbGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdpbmsnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnO1xuaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZWpzJ1xuXG52YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ3JlcXVlc3QnKTtcblxudmFyIGFyZyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuc3dpdGNoIChhcmdbMF0pIHtcbiAgICBjYXNlICctbCc6XG4gICAgICAgIHZhciByZXNvdXJjZSA9ICcvcHJvZHVjdHMnXG5cdGJyZWFrO1xuICAgIGNhc2UgJy1hJzpcblx0dmFyIHJlc291cmNlID0gJy9hY2NvdW50cydcblx0YnJlYWs7XG4gICAgZGVmYXVsdDogY29uc29sZS5sb2coXG4gICAgICAgICd1bmQnKTtcbn07XG5cbmZ1bmN0aW9uIHNlbmQocmVzb3VyY2UpIHtcblxudmFyIGFwaUtleSA9ICcycTdEZkJqMUdjaWs1bEJFJztcbnZhciBhcGlTZWNyZXQgPSAnQXJ0RGJZMzYyeVdlVzM1d2h1WE5lUXpZQzVudW5GVFcnO1xuXG52YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG52YXIgcmVxID0ge1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgcGF0aDogJy9hcGkvdjMvYnJva2VyYWdlLycgKyByZXNvdXJjZSxcbiAgICBib2R5OiAnJ1xufTtcblxudmFyIG1lc3NhZ2UgPSB0aW1lc3RhbXAgKyByZXEubWV0aG9kICsgcmVxLnBhdGggKyByZXEuYm9keTtcblxudmFyIHNpZ25hdHVyZSA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwaVNlY3JldCkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdChcImhleFwiKTtcblxudmFyIG9wdGlvbnMgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmNvaW5iYXNlLmNvbS8nLFxuICAgIHVybDogcmVxLnBhdGgsXG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NCLUFDQ0VTUy1TSUdOJzogc2lnbmF0dXJlLFxuICAgICAgICAnQ0ItQUNDRVNTLVRJTUVTVEFNUCc6IHRpbWVzdGFtcCxcbiAgICAgICAgJ0NCLUFDQ0VTUy1LRVknOiBhcGlLZXksXG4gICAgICAgICdDQi1WRVJTSU9OJzogJzIwMTUtMDctMjInXG4gICAgfVxufTtcblxucmVxdWVzdChvcHRpb25zLGZ1bmN0aW9uKGVyciwgcmVzcG9uc2Upe1xuICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UuYm9keSk7XG59KTtcbn07XG5mdW5jdGlvbiBzZWxlY3QoKSB7XG5jb25zdCBPcHRpb25zMSA9ICgpID0+IHtcblx0Y29uc3QgaGFuZGxlU2VsZWN0ID0gaXRlbSA9PiB7XG5cdFx0Ly8gYGl0ZW1gID0geyBsYWJlbDogJ0ZpcnN0JywgdmFsdWU6ICdmaXJzdCdcblx0XHRzZW5kKGl0ZW0udmFsdWUpXG5cdH07XG5cblx0Y29uc3QgaXRlbXMgPSBbXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBBY2NvdW50cycsXG5cdFx0dmFsdWU6ICcvYWNjb3VudHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdDYW5jZWwgT3JkZXJzJyxcblx0XHR2YWx1ZTogJy9vcmRlcnMvYmF0Y2hfY2FuY2VsJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBPcmRlcnMnLFxuXHRcdHZhbHVlOiAnL29yZGVycy9oaXN0b3JpY2FsL2JhdGNoJ1xuXHRcdH0sXG5cdFx0e1xuXHRcdGxhYmVsOiAnTGlzdCBGaWxscycsXG5cdFx0dmFsdWU6ICcvb3JkZXJzL2hpc3RvcmljYWwvZmlsbHMnXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgQmVzdCBCaWQvQXNrJyxcblx0XHR2YWx1ZTogJy9iZXN0X2JpZF9hc2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdHZXQgUHJvZHVjdCBCb29rJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0X2Jvb2snXG5cdFx0fSxcblx0XHR7XG5cdFx0bGFiZWw6ICdMaXN0IFByb2R1Y3RzJyxcblx0XHR2YWx1ZTogJy9wcm9kdWN0cydcblx0XHR9LFxuXHRcdHtcblx0XHRsYWJlbDogJ0dldCBUcmFuLXNhY3Rpb25zIFN1bW1hcnknLFxuXHRcdHZhbHVlOiAnL3RyYW5zYWN0aW9uX3N1bW1hcnknXG5cdFx0fVxuXHRdO1xuXG5cdHJldHVybiA8U2VsZWN0SW5wdXQgaXRlbXM9e2l0ZW1zfSBvblNlbGVjdD17aGFuZGxlU2VsZWN0fSAvPjtcbn07XG5cbnJlbmRlcig8T3B0aW9uczEgLz4pO1xuLy9leHBvcnQgZGVmYXVsdCByZXNvdXJjZSA9IGl0ZW0udmFsdWVcbn1cbnNlbGVjdCgpXG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9B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